
> lace@0.1.0 test:jest
> NODE_OPTIONS="$NODE_OPTIONS --experimental-vm-modules --disable-warning=ExperimentalWarning" jest

watchman warning:  Recrawled this watch 11 times, most recently because:
MustScanSubDirs UserDroppedTo resolve, please review the information on
https://facebook.github.io/watchman/docs/troubleshooting.html#recrawl
To clear this warning, run:
`watchman watch-del '/Users/jesse/Documents/GitHub/lace-ink' ; watchman watch-project '/Users/jesse/Documents/GitHub/lace-ink'`

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/unit/console-activity-logging.test.js (27.071 s)
  Console Activity Logging
    Activity Logger Initialization
      ✕ should initialize activity logger during console start (5004 ms)
    User Input Logging
      ✕ should log user_input events with correct data structure (5001 ms)
    Agent Response Logging
      ✕ should log agent_response events with timing and token data (5000 ms)
    Integrated Console Flow
      ✕ should log both input and response in correct order (5002 ms)
      ✕ should handle multiple conversation turns (5001 ms)

  ● Console Activity Logging › Activity Logger Initialization › should initialize activity logger during console start

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      53 |
      54 |   describe('Activity Logger Initialization', () => {
    > 55 |     test('should initialize activity logger during console start', async () => {
         |     ^
      56 |       await console.activityLogger.initialize();
      57 |       
      58 |       // Verify the database was created

      at test (test/unit/console-activity-logging.test.js:55:5)
      at describe (test/unit/console-activity-logging.test.js:54:3)
      at describe (test/unit/console-activity-logging.test.js:12:1)

  ● Console Activity Logging › Activity Logger Initialization › should initialize activity logger during console start

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/console-activity-logging.test.js:45:36)

  ● Console Activity Logging › User Input Logging › should log user_input events with correct data structure

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      66 |
      67 |   describe('User Input Logging', () => {
    > 68 |     beforeEach(async () => {
         |     ^
      69 |       await console.activityLogger.initialize();
      70 |     });
      71 |

      at beforeEach (test/unit/console-activity-logging.test.js:68:5)
      at describe (test/unit/console-activity-logging.test.js:67:3)
      at describe (test/unit/console-activity-logging.test.js:12:1)

  ● Console Activity Logging › User Input Logging › should log user_input events with correct data structure

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/console-activity-logging.test.js:45:36)

  ● Console Activity Logging › Agent Response Logging › should log agent_response events with timing and token data

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      94 |
      95 |   describe('Agent Response Logging', () => {
    > 96 |     beforeEach(async () => {
         |     ^
      97 |       await console.activityLogger.initialize();
      98 |     });
      99 |

      at beforeEach (test/unit/console-activity-logging.test.js:96:5)
      at describe (test/unit/console-activity-logging.test.js:95:3)
      at describe (test/unit/console-activity-logging.test.js:12:1)

  ● Console Activity Logging › Agent Response Logging › should log agent_response events with timing and token data

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/console-activity-logging.test.js:45:36)

  ● Console Activity Logging › Integrated Console Flow › should log both input and response in correct order

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      125 |
      126 |   describe('Integrated Console Flow', () => {
    > 127 |     beforeEach(async () => {
          |     ^
      128 |       await console.activityLogger.initialize();
      129 |     });
      130 |

      at beforeEach (test/unit/console-activity-logging.test.js:127:5)
      at describe (test/unit/console-activity-logging.test.js:126:3)
      at describe (test/unit/console-activity-logging.test.js:12:1)

  ● Console Activity Logging › Integrated Console Flow › should log both input and response in correct order

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/console-activity-logging.test.js:45:36)

  ● Console Activity Logging › Integrated Console Flow › should handle multiple conversation turns

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      125 |
      126 |   describe('Integrated Console Flow', () => {
    > 127 |     beforeEach(async () => {
          |     ^
      128 |       await console.activityLogger.initialize();
      129 |     });
      130 |

      at beforeEach (test/unit/console-activity-logging.test.js:127:5)
      at describe (test/unit/console-activity-logging.test.js:126:3)
      at describe (test/unit/console-activity-logging.test.js:12:1)

  ● Console Activity Logging › Integrated Console Flow › should handle multiple conversation turns

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/console-activity-logging.test.js:45:36)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/unit/agent-activity-logging.test.js (32.133 s)
  Agent Model Call Activity Logging
    Model Request Logging
      ✕ should log model_request events before sending to provider (5003 ms)
    Model Response Logging
      ✕ should log model_response events with timing and cost data (5002 ms)
    Integrated Model Call Flow
      ✕ should log both request and response in correct order (5000 ms)
      ✕ should handle multiple model calls in sequence (5000 ms)
    Error Handling
      ✕ should not log response events when model call fails (5000 ms)
      ✕ should handle missing activity logger gracefully (5000 ms)

  ● Agent Model Call Activity Logging › Model Request Logging › should log model_request events before sending to provider

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      18 |   let sessionId;
      19 |
    > 20 |   beforeEach(async () => {
         |   ^
      21 |     harness = new TestHarness();
      22 |     testDbPath = join(tmpdir(), `agent-activity-test-${Date.now()}.db`);
      23 |     activityLogger = new ActivityLogger(testDbPath);

      at beforeEach (test/unit/agent-activity-logging.test.js:20:3)
      at describe (test/unit/agent-activity-logging.test.js:12:1)

  ● Agent Model Call Activity Logging › Model Request Logging › should log model_request events before sending to provider

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/agent-activity-logging.test.js:75:28)

  ● Agent Model Call Activity Logging › Model Response Logging › should log model_response events with timing and cost data

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      18 |   let sessionId;
      19 |
    > 20 |   beforeEach(async () => {
         |   ^
      21 |     harness = new TestHarness();
      22 |     testDbPath = join(tmpdir(), `agent-activity-test-${Date.now()}.db`);
      23 |     activityLogger = new ActivityLogger(testDbPath);

      at beforeEach (test/unit/agent-activity-logging.test.js:20:3)
      at describe (test/unit/agent-activity-logging.test.js:12:1)

  ● Agent Model Call Activity Logging › Model Response Logging › should log model_response events with timing and cost data

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/agent-activity-logging.test.js:75:28)

  ● Agent Model Call Activity Logging › Integrated Model Call Flow › should log both request and response in correct order

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      18 |   let sessionId;
      19 |
    > 20 |   beforeEach(async () => {
         |   ^
      21 |     harness = new TestHarness();
      22 |     testDbPath = join(tmpdir(), `agent-activity-test-${Date.now()}.db`);
      23 |     activityLogger = new ActivityLogger(testDbPath);

      at beforeEach (test/unit/agent-activity-logging.test.js:20:3)
      at describe (test/unit/agent-activity-logging.test.js:12:1)

  ● Agent Model Call Activity Logging › Integrated Model Call Flow › should log both request and response in correct order

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/agent-activity-logging.test.js:75:28)

  ● Agent Model Call Activity Logging › Integrated Model Call Flow › should handle multiple model calls in sequence

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      18 |   let sessionId;
      19 |
    > 20 |   beforeEach(async () => {
         |   ^
      21 |     harness = new TestHarness();
      22 |     testDbPath = join(tmpdir(), `agent-activity-test-${Date.now()}.db`);
      23 |     activityLogger = new ActivityLogger(testDbPath);

      at beforeEach (test/unit/agent-activity-logging.test.js:20:3)
      at describe (test/unit/agent-activity-logging.test.js:12:1)

  ● Agent Model Call Activity Logging › Integrated Model Call Flow › should handle multiple model calls in sequence

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/agent-activity-logging.test.js:75:28)

  ● Agent Model Call Activity Logging › Error Handling › should not log response events when model call fails

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      18 |   let sessionId;
      19 |
    > 20 |   beforeEach(async () => {
         |   ^
      21 |     harness = new TestHarness();
      22 |     testDbPath = join(tmpdir(), `agent-activity-test-${Date.now()}.db`);
      23 |     activityLogger = new ActivityLogger(testDbPath);

      at beforeEach (test/unit/agent-activity-logging.test.js:20:3)
      at describe (test/unit/agent-activity-logging.test.js:12:1)

  ● Agent Model Call Activity Logging › Error Handling › should not log response events when model call fails

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/agent-activity-logging.test.js:75:28)

  ● Agent Model Call Activity Logging › Error Handling › should handle missing activity logger gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      18 |   let sessionId;
      19 |
    > 20 |   beforeEach(async () => {
         |   ^
      21 |     harness = new TestHarness();
      22 |     testDbPath = join(tmpdir(), `agent-activity-test-${Date.now()}.db`);
      23 |     activityLogger = new ActivityLogger(testDbPath);

      at beforeEach (test/unit/agent-activity-logging.test.js:20:3)
      at describe (test/unit/agent-activity-logging.test.js:12:1)

  ● Agent Model Call Activity Logging › Error Handling › should handle missing activity logger gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/agent-activity-logging.test.js:75:28)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/web-companion/unit/web-companion-ui-components.test.js
  Web Companion UI Components Real Tests
    App Component Integration
      ✓ should render main app structure with header and panes (40 ms)
      ✕ should handle pane visibility toggles (7 ms)
      ✕ should handle keyboard shortcuts for tab switching (4 ms)
      ✕ should handle connection status changes (3 ms)
      ✕ should handle activity events and display them (3 ms)
      ✕ should prevent duplicate events (3 ms)
    Tab Navigation and Content
      ✕ should switch between tabs correctly (3 ms)
      ✕ should display correct tab icons (2 ms)
      ✕ should show activity filters when activity tab is active (2 ms)
    Error Handling and Loading States
      ✕ should display loading state initially (3 ms)
      ✕ should display error notifications (2 ms)
      ✕ should handle disconnect gracefully (3 ms)
    Session Management
      ✕ should handle session subscription (2 ms)
      ✕ should display session clear button when session is active (3 ms)
    Event Type Colors and Display
      ✕ should apply correct colors to event types (2 ms)
      ✕ should format timestamps correctly (6 ms)
    Keyboard Shortcuts
      ✕ should handle keyboard shortcuts for pane toggles (2 ms)
      ✕ should handle tab switching with number keys (3 ms)

  ● Web Companion UI Components Real Tests › App Component Integration › should handle pane visibility toggles

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › App Component Integration › should handle keyboard shortcuts for tab switching

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › App Component Integration › should handle connection status changes

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › App Component Integration › should handle activity events and display them

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › App Component Integration › should prevent duplicate events

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Tab Navigation and Content › should switch between tabs correctly

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Tab Navigation and Content › should display correct tab icons

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Tab Navigation and Content › should show activity filters when activity tab is active

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Error Handling and Loading States › should display loading state initially

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Error Handling and Loading States › should display error notifications

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Error Handling and Loading States › should handle disconnect gracefully

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Session Management › should handle session subscription

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Session Management › should display session clear button when session is active

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Event Type Colors and Display › should apply correct colors to event types

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Event Type Colors and Display › should format timestamps correctly

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Keyboard Shortcuts › should handle keyboard shortcuts for pane toggles

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

  ● Web Companion UI Components Real Tests › Keyboard Shortcuts › should handle tab switching with number keys

    TypeError: Cannot read properties of undefined (reading 'on')

      69 |     setSocket(newSocket);
      70 |
    > 71 |     newSocket.on('connect', () => {
         |               ^
      72 |       console.log('Connected to Lace server');
      73 |       setConnectionStatus('connected');
      74 |       setIsLoading(false);

      at on (web/js/app.js:71:15)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23949:20)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at commitHookEffectListMount (node_modules/react-dom/cjs/react-dom-client.development.js:11905:29)
      at commitHookPassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:12028:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13841:13)
      at recursivelyTraversePassiveMountEffects (node_modules/react-dom/cjs/react-dom-client.development.js:13815:11)
      at commitPassiveMountOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:13853:11)
      at flushPassiveEffects (node_modules/react-dom/cjs/react-dom-client.development.js:15737:9)
      at node_modules/react-dom/cjs/react-dom-client.development.js:15379:15
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at node_modules/react/cjs/react.development.js:822:21

FAIL test/ui/commands/registry.test.ts
  Command Registry
    basicCommands
      ✓ should handle help command (1 ms)
      ✓ should handle quit command
      ✓ should handle quit aliases
      ✓ should handle help command when command manager unavailable (1 ms)
    agentCommands
      ✓ should handle status command
      ✓ should handle tools command
      ✓ should handle memory command (1 ms)
      ✓ should handle approval command
      ✕ should require agent for agent commands
      ✓ should handle missing agent tools gracefully
    toolManagementCommands
      ✓ should handle auto-approve command with argument
      ✓ should handle auto-approve command without argument
      ✓ should handle deny command with argument (1 ms)
      ✓ should handle deny command without argument
      ✓ should have parameter descriptions
    getAllCommands
      ✓ should return all commands

  ● Command Registry › agentCommands › should require agent for agent commands

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      137 |     it('should require agent for agent commands', () => {
      138 |       for (const cmd of agentCommands) {
    > 139 |         expect(cmd.requiresAgent).toBe(true);
          |                                   ^
      140 |       }
      141 |     });
      142 |

      at Object.<anonymous> (test/ui/commands/registry.test.ts:139:35)

FAIL test/unit/dual-logging-integration.test.js (36.839 s)
  Dual Logging System Integration
    Debug Logger Initialization
      ✕ should initialize debug logger from CLI args (5003 ms)
      ✕ should not initialize debug logger when options not provided (5001 ms)
    Independent Logging Systems
      ✕ should log to both systems without interference (5002 ms)
      ✕ should handle activity logging failure gracefully without affecting debug logging (5001 ms)
      ✕ should handle debug logging failure without affecting activity logging (5001 ms)
    Subagent Logger Inheritance
      ✕ should pass both loggers to subagents (5001 ms)
    Performance and Independence
      ✕ should not significantly impact performance when both systems enabled (5001 ms)

  ● Dual Logging System Integration › Debug Logger Initialization › should initialize debug logger from CLI args

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      101 |
      102 |   describe('Debug Logger Initialization', () => {
    > 103 |     test('should initialize debug logger from CLI args', async () => {
          |     ^
      104 |       await setup();
      105 |       
      106 |       try {

      at test (test/unit/dual-logging-integration.test.js:103:5)
      at describe (test/unit/dual-logging-integration.test.js:102:3)
      at describe (test/unit/dual-logging-integration.test.js:44:1)

  ● Dual Logging System Integration › Debug Logger Initialization › should not initialize debug logger when options not provided

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      131 |     });
      132 |
    > 133 |     test('should not initialize debug logger when options not provided', async () => {
          |     ^
      134 |       await setup();
      135 |       
      136 |       try {

      at test (test/unit/dual-logging-integration.test.js:133:5)
      at describe (test/unit/dual-logging-integration.test.js:102:3)
      at describe (test/unit/dual-logging-integration.test.js:44:1)

  ● Dual Logging System Integration › Independent Logging Systems › should log to both systems without interference

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      154 |
      155 |   describe('Independent Logging Systems', () => {
    > 156 |     test('should log to both systems without interference', async () => {
          |     ^
      157 |       await setup();
      158 |       
      159 |       try {

      at test (test/unit/dual-logging-integration.test.js:156:5)
      at describe (test/unit/dual-logging-integration.test.js:155:3)
      at describe (test/unit/dual-logging-integration.test.js:44:1)

  ● Dual Logging System Integration › Independent Logging Systems › should handle activity logging failure gracefully without affecting debug logging

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      210 |     });
      211 |
    > 212 |     test('should handle activity logging failure gracefully without affecting debug logging', async () => {
          |     ^
      213 |       await setup();
      214 |       
      215 |       try {

      at test (test/unit/dual-logging-integration.test.js:212:5)
      at describe (test/unit/dual-logging-integration.test.js:155:3)
      at describe (test/unit/dual-logging-integration.test.js:44:1)

  ● Dual Logging System Integration › Independent Logging Systems › should handle debug logging failure without affecting activity logging

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      255 |     });
      256 |
    > 257 |     test('should handle debug logging failure without affecting activity logging', async () => {
          |     ^
      258 |       await setup();
      259 |       
      260 |       try {

      at test (test/unit/dual-logging-integration.test.js:257:5)
      at describe (test/unit/dual-logging-integration.test.js:155:3)
      at describe (test/unit/dual-logging-integration.test.js:44:1)

  ● Dual Logging System Integration › Subagent Logger Inheritance › should pass both loggers to subagents

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      300 |
      301 |   describe('Subagent Logger Inheritance', () => {
    > 302 |     test('should pass both loggers to subagents', async () => {
          |     ^
      303 |       await setup();
      304 |       
      305 |       try {

      at test (test/unit/dual-logging-integration.test.js:302:5)
      at describe (test/unit/dual-logging-integration.test.js:301:3)
      at describe (test/unit/dual-logging-integration.test.js:44:1)

  ● Dual Logging System Integration › Performance and Independence › should not significantly impact performance when both systems enabled

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      344 |
      345 |   describe('Performance and Independence', () => {
    > 346 |     test('should not significantly impact performance when both systems enabled', async () => {
          |     ^
      347 |       await setup();
      348 |       
      349 |       try {

      at test (test/unit/dual-logging-integration.test.js:346:5)
      at describe (test/unit/dual-logging-integration.test.js:345:3)
      at describe (test/unit/dual-logging-integration.test.js:44:1)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

PASS test/unit/snapshot-git-operations.test.js
  GitOperations
    constructor
      ✓ should create GitOperations with valid project path (7 ms)
      ✓ should throw error for invalid project path during initialize
    initialization
      ✓ should initialize git repository in .lace directory (153 ms)
      ✓ should handle already initialized repository (136 ms)
      ✓ should create proper .gitignore in snapshot repo (138 ms)
    git commands
      ✓ should execute git commands with custom git-dir (282 ms)
      ✓ should handle git command errors gracefully (144 ms)
      ✓ should support atomic operations (281 ms)
    repository maintenance
      ✓ should provide repository statistics (402 ms)
      ✓ should support cleanup operations (385 ms)
    error handling
      ✓ should handle corrupted repository (143 ms)
      ✓ should validate git availability (10 ms)
    file operations
      ✓ should track file changes correctly (282 ms)
      ✓ should handle binary files (275 ms)

PASS test/integration/agent-orchestration-integration.test.js
  Agent Orchestration Integration Tests
    Parallel Tool Execution with TaskTool
      ✓ should execute multiple TaskTool methods in parallel (2 ms)
    Complex Multi-Agent Coordination
      ✓ should coordinate multiple sub-agents with progress reporting (1 ms)
      ✓ should handle inter-agent message passing (1 ms)
    Error Recovery in Parallel Execution
      ✓ should handle mixed success/failure scenarios gracefully (313 ms)
      ✓ should implement circuit breaker for consistently failing tools (755 ms)
      ✓ should provide actionable error analysis (108 ms)
    Progress Tracking and Coordination
      ✓ should track progress from multiple parallel agents (2 ms)
      ✓ should demonstrate request help functionality (2 ms)
    End-to-End Orchestration Workflow
      ✓ should execute complete parallel workflow with all features (2 ms)
      ✓ should demonstrate sequential fallback when parallel execution fails (1 ms)

PASS test/unit/error-recovery-retry.test.js (8.417 s)
  Error Recovery and Retry Logic
    Automatic Retry with Exponential Backoff
      ✓ should retry transient failures with exponential backoff (326 ms)
      ✓ should give up after max retry attempts (756 ms)
      ✓ should use configurable retry settings (164 ms)
      ✓ should not retry non-transient errors (2 ms)
    Circuit Breaker Pattern
      ✓ should open circuit after consecutive failures (758 ms)
      ✓ should close circuit after successful call following half-open state (1 ms)
      ✓ should provide circuit breaker statistics (758 ms)
    Fallback Strategies
      ✓ should retry sequentially when parallel execution fails (109 ms)
      ✓ should use degraded execution when some tools consistently fail (750 ms)
      ✓ should continue with successful tools when others fail (748 ms)
    Error Aggregation and Reporting
      ✓ should distinguish between tool-specific and systemic errors (1475 ms)
      ✓ should provide actionable error information for recovery (749 ms)
      ✓ should track error patterns across multiple executions (1449 ms)
    Configuration and Tuning
      ✓ should allow custom retry configuration per tool (339 ms)
      ✓ should allow disabling retry for specific tools (1 ms)

PASS test/unit/snapshot-manager.test.js
  SnapshotManager
    constructor
      ✓ should create SnapshotManager with valid project path (8 ms)
      ✓ should accept custom configuration (1 ms)
    initialization
      ✓ should initialize directory structure and git operations (144 ms)
      ✓ should load existing configuration (136 ms)
      ✓ should create index file if not exists (137 ms)
    snapshot creation
      ✓ should create pre-tool snapshot with metadata (2 ms)
      ✓ should create post-tool snapshot with execution results (1 ms)
      ✓ should create manual checkpoint snapshot (2 ms)
      ✓ should handle snapshot creation errors gracefully (1 ms)
    metadata management
      ✓ should save and load snapshot metadata (2 ms)
      ✓ should update snapshot index (2 ms)
      ✓ should handle missing metadata files (141 ms)
    configuration management
      ✓ should apply retention policies (4 ms)
      ✓ should respect exclusion patterns
      ✓ should validate configuration on initialization (1 ms)
    snapshot querying
      ✓ should list snapshots with filtering (3 ms)
      ✓ should search snapshots by date range (13 ms)
    performance monitoring
      ✓ should track snapshot creation performance (1 ms)
      ✓ should provide system statistics (2 ms)

PASS test/unit/web-companion-integration.test.js
  Web Companion Integration Tests
    HTTP API Endpoints
      ✓ should respond to health check (8 ms)
      ✓ should serve sessions endpoint (1 ms)
      ✓ should handle session messages endpoint (2 ms)
      ✓ should handle session stats endpoint (2 ms)
      ✓ should serve static files (2 ms)
    WebSocket Connectivity
      ✓ should accept WebSocket connections (10 ms)
      ✓ should handle connection and disconnection (6 ms)
      ✓ should support event filtering (105 ms)
      ✓ should support session subscription (108 ms)
    Error Handling
      ✓ should handle 404 for unknown API endpoints (2 ms)
      ✓ should handle malformed requests gracefully (2 ms)

PASS test/ui/commands/CommandManager.test.ts
  CommandManager
    command registration
      ✓ should register a command (1 ms)
      ✓ should register multiple commands
      ✓ should handle command aliases
    command parsing
      ✓ should identify command input
      ✓ should parse command with arguments
      ✓ should parse command without arguments
      ✓ should handle empty command gracefully (1 ms)
    command execution
      ✓ should execute simple command
      ✓ should execute async command (10 ms)
      ✓ should handle unknown commands
      ✓ should check agent requirement
      ✓ should execute command that requires agent
      ✓ should handle command execution errors (1 ms)
    command listing and completion
      ✓ should list all non-hidden commands
      ✓ should list all commands including hidden when requested
      ✓ should get command completions
      ✓ should get all completions for empty prefix

PASS test/ui/integration/step16-commands.test.tsx
  Step 16: Command System Integration
    ✓ should create command manager with all commands (1 ms)
    ✓ should integrate with completion system
    ✓ should execute basic commands (1 ms)
    ✓ should handle command completions
    ✓ should validate command system architecture (2 ms)

PASS test/integration/task-orchestration-core.test.js
  Task Orchestration Core Integration
    TaskTool Basic Functionality
      ✓ should successfully delegate a task to a sub-agent (2 ms)
      ✓ should spawn an agent and track relationships
      ✓ should handle progress reporting (2 ms)
      ✓ should handle help requests
    Inter-Agent Message Passing
      ✓ should send and receive messages between agents (1 ms)
      ✓ should filter messages by type
      ✓ should handle large message content with truncation
    Parallel Tool Execution
      ✓ should execute multiple TaskTool operations in parallel (102 ms)
      ✓ should handle tool errors gracefully in parallel execution (1 ms)
    Progress Tracking Integration
      ✓ should aggregate progress from multiple operations
      ✓ should track agents needing help
    Tool Registry Integration
      ✓ should properly register TaskTool with agent context
      ✓ should provide correct tool schema for TaskTool (1 ms)
    Error Recovery and Retry Logic
      ✓ should retry failed operations with exponential backoff (317 ms)
      ✓ should not retry non-retriable errors

PASS test/unit/progress-tracker.test.js
  ProgressTracker
    Initialization
      ✓ should create ProgressTracker instance (1 ms)
      ✓ should use default options
    updateProgress
      ✓ should update progress successfully
      ✓ should use current timestamp if not provided
      ✓ should merge with existing progress data
      ✓ should truncate long details
      ✓ should handle help requests (1 ms)
      ✓ should fail with invalid parameters
      ✓ should trigger callbacks
    getProgress
      ✓ should return progress for existing agent
      ✓ should return null for non-existent agent
    getAllProgress
      ✓ should return all progress entries
      ✓ should return empty array when no progress
    getProgressSummary
      ✓ should return summary for no agents
      ✓ should aggregate status counts
      ✓ should filter by specific agent IDs
      ✓ should include help requests in summary
      ✓ should generate concise summary text
    removeProgress
      ✓ should remove progress for specific agent
      ✓ should return false for non-existent agent
      ✓ should trigger callback on removal
    clearAll
      ✓ should clear all progress data
      ✓ should trigger callback on clear
    Callbacks
      ✓ should add and remove callbacks
      ✓ should ignore non-function callbacks
      ✓ should handle callback errors gracefully (1 ms)
    Helper Methods
      ✓ should get agents needing help
      ✓ should get active agents
    Cleanup and Memory Management
      ✓ should cleanup old entries (200 ms)
      ✓ should respect max entries limit
      ✓ should cleanup completed/failed entries quickly
    Destroy
      ✓ should clean up resources on destroy

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

PASS test/ui/integration/step7-foldable.test.tsx
  Step 7: Foldable Sections Integration
    ✓ ConversationView displays agent_activity message type (1 ms)
    ✓ Message component renders fold indicator when folded
    ✓ Message component renders unfold indicator when unfolded
    ✓ unfolded agent_activity shows all content items (1 ms)
    ✓ folded agent_activity hides detailed content
    ✓ Space key toggles fold state in navigation mode
    ✓ fold state persists in conversation
    ✓ fold indicators use correct colors
    ✓ agent_activity sections are identified in conversation
    ✓ navigation highlights foldable sections correctly

PASS test/unit/debug-logger.test.js
  DebugLogger
    Log Level Parsing
      ✓ should parse valid log levels
      ✓ should handle case insensitive levels
      ✓ should default to off for invalid levels
    Log Level Filtering
      ✓ should respect stderr log level
      ✓ should respect file log level
      ✓ should not log to file if no file path provided
    Message Formatting
      ✓ should format messages with timestamp and level
      ✓ should pad level strings to 5 characters (1 ms)
    File Writing
      ✓ should write to file when configured (51 ms)
      ✓ should create directory if it does not exist (52 ms)
    Log Methods
      ✓ should have debug, info, warn, error methods
      ✓ should call log method with correct level (52 ms)

PASS test/ui/integration/step8-syntax-highlighting.test.tsx
  Step 8: Code Syntax Highlighting Integration
    ✓ Message component detects JavaScript code blocks (6 ms)
    ✓ Message component detects Python code blocks (4 ms)
    ✓ Message component detects JSON code blocks (1 ms)
    ✓ Message component handles multiple code blocks (1 ms)
    ✓ Message component displays highlighted code with colors
    ✓ Message component falls back to plain text on highlight failure
    ✓ Message component handles mixed content with code blocks (1 ms)
    ✓ Message component preserves formatting in code blocks
    ✓ ConversationView displays highlighted code in conversation (1 ms)
    ✓ syntax highlighting does not affect non-code messages
    ✓ syntax highlighting works with different languages (7 ms)
    ✓ syntax highlighting utility functions work correctly

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      16 |     
      17 |     // Should render without errors
    > 18 |     const { unmount } = render(element);
         |                         ^
      19 |     unmount();
      20 |   });
      21 |

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:18:25)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      17 |     // Should render without errors
      18 |     const { unmount } = render(element);
    > 19 |     unmount();
         |     ^
      20 |   });
      21 |
      22 |   test('StatusBar renders as valid React element', () => {

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:19:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      27 |     
      28 |     // Should render without errors
    > 29 |     const { unmount } = render(element);
         |                         ^
      30 |     unmount();
      31 |   });
      32 |

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:29:25)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      28 |     // Should render without errors
      29 |     const { unmount } = render(element);
    > 30 |     unmount();
         |     ^
      31 |   });
      32 |
      33 |   test('ShellInput renders as valid React element', () => {

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:30:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      38 |     
      39 |     // Should render without errors
    > 40 |     const { unmount } = render(element);
         |                         ^
      41 |     unmount();
      42 |   });
      43 |

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:40:25)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      39 |     // Should render without errors
      40 |     const { unmount } = render(element);
    > 41 |     unmount();
         |     ^
      42 |   });
      43 |
      44 |   test('all components render without errors', () => {

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:41:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      57 |     
      58 |     // Test that they render without throwing errors
    > 59 |     const { unmount: unmount1 } = render(conversationElement);
         |                                   ^
      60 |     const { unmount: unmount2 } = render(statusElement);
      61 |     const { unmount: unmount3 } = render(shellInputElement);
      62 |     

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:59:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      58 |     // Test that they render without throwing errors
      59 |     const { unmount: unmount1 } = render(conversationElement);
    > 60 |     const { unmount: unmount2 } = render(statusElement);
         |                                   ^
      61 |     const { unmount: unmount3 } = render(shellInputElement);
      62 |     
      63 |     unmount1();

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:60:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      59 |     const { unmount: unmount1 } = render(conversationElement);
      60 |     const { unmount: unmount2 } = render(statusElement);
    > 61 |     const { unmount: unmount3 } = render(shellInputElement);
         |                                   ^
      62 |     
      63 |     unmount1();
      64 |     unmount2();

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:61:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      61 |     const { unmount: unmount3 } = render(shellInputElement);
      62 |     
    > 63 |     unmount1();
         |     ^
      64 |     unmount2();
      65 |     unmount3();
      66 |   });

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:63:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      62 |     
      63 |     unmount1();
    > 64 |     unmount2();
         |     ^
      65 |     unmount3();
      66 |   });
      67 |

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:64:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      63 |     unmount1();
      64 |     unmount2();
    > 65 |     unmount3();
         |     ^
      66 |   });
      67 |
      68 |   test('components accept their expected props', () => {

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:65:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      101 |     
      102 |     // Test that they render without throwing errors
    > 103 |     const { unmount: unmount1 } = render(conversationElement);
          |                                   ^
      104 |     const { unmount: unmount2 } = render(statusElement);
      105 |     const { unmount: unmount3 } = render(inputElement);
      106 |     

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:103:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      102 |     // Test that they render without throwing errors
      103 |     const { unmount: unmount1 } = render(conversationElement);
    > 104 |     const { unmount: unmount2 } = render(statusElement);
          |                                   ^
      105 |     const { unmount: unmount3 } = render(inputElement);
      106 |     
      107 |     unmount1();

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:104:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      103 |     const { unmount: unmount1 } = render(conversationElement);
      104 |     const { unmount: unmount2 } = render(statusElement);
    > 105 |     const { unmount: unmount3 } = render(inputElement);
          |                                   ^
      106 |     
      107 |     unmount1();
      108 |     unmount2();

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:105:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      105 |     const { unmount: unmount3 } = render(inputElement);
      106 |     
    > 107 |     unmount1();
          |     ^
      108 |     unmount2();
      109 |     unmount3();
      110 |   });

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:107:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      106 |     
      107 |     unmount1();
    > 108 |     unmount2();
          |     ^
      109 |     unmount3();
      110 |   });
      111 |

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:108:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      107 |     unmount1();
      108 |     unmount2();
    > 109 |     unmount3();
          |     ^
      110 |   });
      111 |
      112 |   test('component composition maintains proper hierarchy', () => {

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:109:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      134 |     
      135 |     // Test that they render without throwing errors
    > 136 |     const { unmount: unmount1 } = render(appStructure.conversationView);
          |                                   ^
      137 |     const { unmount: unmount2 } = render(appStructure.statusBar);
      138 |     const { unmount: unmount3 } = render(appStructure.shellInput);
      139 |     

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:136:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      135 |     // Test that they render without throwing errors
      136 |     const { unmount: unmount1 } = render(appStructure.conversationView);
    > 137 |     const { unmount: unmount2 } = render(appStructure.statusBar);
          |                                   ^
      138 |     const { unmount: unmount3 } = render(appStructure.shellInput);
      139 |     
      140 |     unmount1();

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:137:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      136 |     const { unmount: unmount1 } = render(appStructure.conversationView);
      137 |     const { unmount: unmount2 } = render(appStructure.statusBar);
    > 138 |     const { unmount: unmount3 } = render(appStructure.shellInput);
          |                                   ^
      139 |     
      140 |     unmount1();
      141 |     unmount2();

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:223:14)
      at render (node_modules/ink/src/render.ts:89:11)
      at inkRender (node_modules/ink-testing-library/source/index.ts:77:19)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:138:35)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      138 |     const { unmount: unmount3 } = render(appStructure.shellInput);
      139 |     
    > 140 |     unmount1();
          |     ^
      141 |     unmount2();
      142 |     unmount3();
      143 |   });

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:140:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      139 |     
      140 |     unmount1();
    > 141 |     unmount2();
          |     ^
      142 |     unmount3();
      143 |   });
      144 | });

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:141:5)

  console.error
    An update to Root inside a test was not wrapped in act(...).
    
    When testing, code that causes React state updates should be wrapped into act(...):
    
    act(() => {
      /* fire events that update state */
    });
    /* assert on the output */
    
    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      140 |     unmount1();
      141 |     unmount2();
    > 142 |     unmount3();
          |     ^
      143 |   });
      144 | });
      145 |

      at node_modules/react-reconciler/cjs/react-reconciler.development.js:13614:19
      at runWithFiberInDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:1738:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-reconciler/cjs/react-reconciler.development.js:13613:9)
      at scheduleUpdateOnFiber (node_modules/react-reconciler/cjs/react-reconciler.development.js:12068:11)
      at updateContainerImpl (node_modules/react-reconciler/cjs/react-reconciler.development.js:14229:10)
      at Object.updateContainerSync (node_modules/react-reconciler/cjs/react-reconciler.development.js:14170:7)
      at Ink.updateContainerSync (node_modules/ink/src/ink.tsx:300:14)
      at unmount (node_modules/ink/src/render.ts:94:13)
      at Object.<anonymous> (test/ui/integration/layout.test.tsx:142:5)

PASS test/ui/integration/layout.test.tsx
  Step 2: Basic Layout Structure
    ✓ ConversationView renders as valid React element (22 ms)
    ✓ StatusBar renders as valid React element (2 ms)
    ✓ ShellInput renders as valid React element (3 ms)
    ✓ all components render without errors (6 ms)
    ✓ components accept their expected props (6 ms)
    ✓ component composition maintains proper hierarchy (5 ms)

PASS test/unit/task-tool.test.js
  TaskTool
    Initialization
      ✓ should create TaskTool instance
      ✓ should have proper schema (1 ms)
      ✓ should set agent context correctly
      ✓ should set session ID correctly
      ✓ should set progress tracker correctly
    delegateTask
      ✓ should delegate task successfully with defaults
      ✓ should delegate task with custom options
      ✓ should report progress on completion
      ✓ should fail without description
      ✓ should fail without agent context
      ✓ should handle timeout (102 ms)
      ✓ should handle agent errors
    spawnAgent
      ✓ should spawn agent successfully
      ✓ should use default values
      ✓ should fail without required parameters
      ✓ should fail without agent context
      ✓ should truncate long task descriptions in result
    reportProgress
      ✓ should report progress successfully
      ✓ should work without progress tracker
      ✓ should fail without status
      ✓ should fail without agent context (1 ms)
      ✓ should truncate long details
    requestHelp
      ✓ should request help successfully
      ✓ should work without attempted solutions
      ✓ should fail without required parameters
      ✓ should fail without agent context
      ✓ should truncate long text fields
    Integration with ToolRegistry
      ✓ should be registered in tool registry
      ✓ should handle agent context injection via registry
    Error Handling
      ✓ should handle progress tracker errors gracefully
      ✓ should handle subagent spawn failures

PASS test/ui/integration/step15-performance.test.tsx
  Step 15: Performance & Memory
    ✓ ConversationView handles 100 messages without performance issues (1 ms)
    ✓ ConversationView handles 500 messages efficiently (1 ms)
    ✓ ConversationView implements virtual scrolling for large conversations
    ✓ virtual scrolling maintains correct message indices (2 ms)
    ✓ scrolling performance remains consistent across conversation sizes (1 ms)
    ✓ search functionality works efficiently with large conversations
    ✓ agent activity folding/unfolding does not cause performance issues (2 ms)
    ✓ memory usage remains stable with message state changes (4 ms)
    ✓ large conversation navigation maintains responsiveness (2 ms)
    ✓ ConversationView handles mixed content types efficiently

PASS test/ui/integration/step4-navigation.test.tsx
  Step 4: Navigation Mode Integration
    ✓ StatusBar displays navigation mode correctly (1 ms)
    ✓ InputBar shows navigation mode message
    ✓ ConversationView highlights messages correctly (1 ms)
    ✓ navigation state affects all components correctly

PASS test/ui/integration/step10-search.test.tsx
  Step 10: Search Functionality Integration
    ✓ search highlight utility highlights text correctly (1 ms)
    ✓ search highlight utility is case insensitive
    ✓ search highlight utility handles special regex characters
    ✓ search highlight utility handles empty search term
    ✓ containsSearchTerm function works correctly
    ✓ Message component applies search highlighting (1 ms)
    ✓ Message component highlights agent activity summary and content
    ✓ ConversationView passes search props to Message components
    ✓ StatusBar displays search mode correctly
    ✓ StatusBar shows search result navigation info
    ✓ InputBar displays search mode with / prefix (1 ms)
    ✓ search functionality flow with mock messages
    ✓ search result navigation logic
    ✓ search filter integration with conversation filter
    ✓ search state management logic

PASS test/ui/integration/step5-input.test.tsx
  Step 5: Basic Input Handling Integration
    ✓ InputBar allows text input when not in navigation mode (1 ms)
    ✓ InputBar shows cursor when typing (1 ms)
    ✓ ConversationView displays messages including user input
    ✓ App prevents empty message submission
    ✓ App adds user messages to conversation on submit (1 ms)
    ✓ App resets input field after successful submission
    ✓ input mode vs navigation mode behavior
    ✓ keyboard input updates input text state
    ✓ backspace removes characters from input

PASS test/ui/components/ConversationView.test.tsx
  ConversationView Component
    ✓ renders correct JSX structure with layout props (1 ms)
    ✓ displays mock conversation messages (1 ms)
    ✓ displays messages with correct types and content

PASS test/ui/integration/step3-messages.test.tsx
  Step 3: Basic Message Display Integration
    ✓ ConversationView displays complete conversation with messages (1 ms)
    ✓ Message components display with proper prefixes and types (1 ms)
    ✓ conversation message types are handled correctly
    ✓ ConversationView handles different message combinations
    ✓ conversation view navigation integration (1 ms)

PASS test/ui/integration/step12-streaming.test.tsx
  Step 12: Streaming Text Support
    ✓ streaming message type displays with cursor indicator (1 ms)
    ✓ streaming message displays partial content with typing cursor
    ✓ completed streaming message removes cursor indicator
    ✓ ConversationView auto-scrolls during streaming (1 ms)
    ✓ StatusBar shows streaming indicator during text stream
    ✓ streaming preserves content formatting and syntax highlighting
    ✓ long streaming text updates without flickering
    ✓ streaming state transitions correctly from loading to streaming to complete
    ✓ streaming respects navigation mode and highlighting
    ✓ streaming works with search highlighting (1 ms)

PASS test/ui/components/Message.test.tsx
  Message Component
    ✓ renders user message with correct prefix and styling (1 ms)
    ✓ renders assistant message with correct prefix and styling
    ✓ handles multi-line content correctly

PASS test/ui/integration/step9-filter.test.tsx
  Step 9: Filter System Integration
    ✓ filter mode "all" shows all message types (1 ms)
    ✓ filter mode "conversation" only shows user and assistant messages
    ✓ filter mode "search" finds messages containing search term
    ✓ StatusBar getFilterText function works correctly
    ✓ filter function correctly filters conversation messages only (1 ms)
    ✓ filter function correctly filters search results
    ✓ ConversationView works with filtered messages
    ✓ filter mode state management logic
    ✓ navigation position resets on filter change (1 ms)
    ✓ filtered message counts are accurate

PASS test/unit/context-capture.test.js
  ContextCapture
    constructor
      ✓ should create ContextCapture with database dependencies (5 ms)
      ✓ should accept optional configuration (1 ms)
    conversation context capture
      ✓ should capture recent conversation history
      ✓ should limit conversation history to configured amount (1 ms)
      ✓ should handle missing conversation data gracefully
    activity context capture
      ✓ should capture recent tool usage
      ✓ should filter tool events by session (1 ms)
      ✓ should limit tool usage to configured amount
    real repository integration
      ✓ should capture real repository SHA when available (13 ms)
      ✓ should handle non-git directories gracefully
    comprehensive context capture
      ✓ should capture complete context for tool execution (1 ms)
      ✓ should enrich context with related conversations
    context enrichment
      ✓ should add semantic context based on tool type
      ✓ should suggest relevant search terms (1 ms)
    performance and caching
      ✓ should cache repeated context captures
      ✓ should handle database errors gracefully

PASS test/ui/integration/step6-mock-response.test.tsx
  Step 6: Mock Agent Response Integration
    ✓ ConversationView displays loading state after user message (1 ms)
    ✓ loading message displays spinner animation
    ✓ StatusBar shows loading indicator during agent response (1 ms)
    ✓ loading state prevents new input submission
    ✓ mock agent response replaces loading message
    ✓ agent response contains realistic mock content
    ✓ multiple user messages trigger multiple agent responses
    ✓ loading delay is reasonable for user experience
    ✓ spinner animation cycles through different states (1 ms)

PASS test/ui/integration/step14-diff-highlighting.test.tsx
  Step 14: Diff Highlighting
    ✓ detects and highlights simple diff content (2 ms)
    ✓ highlights diff additions with green color
    ✓ highlights diff deletions with red color
    ✓ handles mixed diff with additions and deletions
    ✓ handles diff context lines without color
    ✓ handles multiple diff blocks in one message (1 ms)
    ✓ handles diff headers and hunk headers correctly
    ✓ preserves diff formatting with proper indentation
    ✓ falls back gracefully if diff processing fails
    ○ skipped ignores non-diff code blocks

PASS test/unit/restore-operations.test.js
  RestoreOperations
    constructor
      ✓ should create RestoreOperations with snapshot manager and git operations (2 ms)
      ✓ should validate required dependencies
    snapshot browsing
      ✓ should list available snapshots with metadata (1 ms)
      ✓ should filter snapshots by type
      ✓ should get detailed snapshot information
      ✓ should handle missing snapshot gracefully (1 ms)
    restoration preview
      ✓ should preview changes for full restore
      ✓ should preview selective file restoration
      ✓ should validate files exist in snapshot
    safety checks
      ✓ should detect working tree changes before restore (1 ms)
      ✓ should recommend stashing or committing changes
      ✓ should support force restore option
    full restoration
      ✓ should restore complete project state from snapshot (1 ms)
      ✓ should create backup before restoration (1 ms)
      ✓ should handle restoration errors gracefully
    selective file restoration
      ✓ should restore specific files from snapshot (1 ms)
      ✓ should handle partial file restoration failures
    restoration history and rollback
      ✓ should track restoration operations (1 ms)
      ✓ should support rollback to previous state
    integration with snapshot system
      ✓ should find related snapshots by tool execution (1 ms)
      ✓ should provide restoration recommendations

PASS test/unit/snapshot-context-integration.test.js
  SnapshotManager + ContextCapture Integration
    Integrated Context Capture
      ✓ should enrich snapshot metadata with conversation context (7 ms)
      ✓ should work with post-tool snapshots (2 ms)
      ✓ should fall back gracefully when context capture fails (1 ms)
      ✓ should work without context capture setup (1 ms)
      ✓ should capture search terms for tool operations (2 ms)

PASS test/unit/tool-registry-snapshot-integration.test.js
  ToolRegistry Snapshot Integration
    Automatic Snapshot Creation
      ✓ should create pre-tool snapshot before tool execution (5 ms)
      ✓ should create snapshots with rich context from conversation and activity
      ✓ should handle tool execution errors and still create snapshots (1 ms)
      ✓ should work with existing tool execution without snapshots
      ✓ should disable snapshot creation when snapshot manager not configured
    Tool Call Metadata Enhancement
      ✓ should enrich tool calls with execution context
      ✓ should track tool execution performance metrics (12 ms)
    Configuration and Integration
      ✓ should support configurable snapshot behavior
      ✓ should integrate with existing activity logging (1 ms)

PASS test/unit/tools.test.js
  Tool System
    ToolRegistry
      ✓ should initialize with core tools
      ✓ should provide tool schemas (1 ms)
      ✓ should execute tool methods
    JavaScriptTool
      ✓ should evaluate simple expressions (1 ms)
      ✓ should handle calculation method
      ✓ should handle errors gracefully (2 ms)
      ✓ should provide console output
    FileTool
      ✓ should read and write files (1 ms)
      ✓ should list directory contents
      ✓ should handle non-existent files
    ShellTool
      ✓ should execute simple commands (4 ms)
      ✓ should handle command errors (3 ms)
      ✓ should respect working directory (3 ms)

PASS test/unit/task-tool-progress-integration.test.js
  TaskTool-ProgressTracker Integration
    Progress Reporting Integration
      ✓ should report progress through TaskTool to ProgressTracker
      ✓ should handle help requests through integration
      ✓ should handle delegateTask with progress tracking (1 ms)
    Summary and Aggregation
      ✓ should aggregate progress from multiple TaskTool agents
    Error Handling Integration
      ✓ should handle TaskTool errors gracefully in ProgressTracker
      ✓ should work when ProgressTracker is not available
    Real-world Scenarios
      ✓ should handle complex multi-agent workflow

PASS test/ui/components/StatusBar.test.tsx
  StatusBar Component
    ✓ renders correct JSX structure with border (1 ms)
    ✓ displays app name with correct styling
    ✓ displays status with correct styling in normal mode (1 ms)
    ✓ displays navigation hint in normal mode
    ✓ displays navigation mode with position when in nav mode
    ✓ displays token usage with correct formatting (1 ms)
    ✓ displays model name with correct styling
    ✓ formats large token numbers correctly
    ✓ handles responsive layout for narrow terminals
    ✓ shows all status information in wide terminal (1 ms)

PASS test/unit/snapshot-cli.test.js
  SnapshotCLI
    constructor
      ✓ should create SnapshotCLI with required dependencies (1 ms)
      ✓ should validate required dependencies
    list command
      ✓ should list all snapshots in table format
      ✓ should filter snapshots by type
      ✓ should show system statistics
    inspect command
      ✓ should show detailed snapshot information (1 ms)
      ✓ should show tool call information for tool snapshots
      ✓ should show related snapshots
      ✓ should handle missing snapshot gracefully
    restore preview command
      ✓ should preview full restoration changes (1 ms)
      ✓ should preview file restoration
      ✓ should show safety warnings
    restore command
      ✓ should restore from snapshot with confirmation
      ✓ should restore specific files (1 ms)
      ✓ should handle restoration errors gracefully
    recommendations command
      ✓ should show restoration recommendations
      ✓ should format recommendations with priorities (1 ms)
    interactive features
      ✓ should support interactive snapshot selection
      ✓ should prompt for confirmation on destructive operations
    help and usage
      ✓ should show help information
      ✓ should show command examples
    output formatting
      ✓ should format timestamps in human-readable format (1 ms)
      ✓ should format file sizes in human-readable format
      ✓ should colorize output based on type and priority

PASS test/ui/components/InputBar.test.tsx
  InputBar Component
    ✓ renders correct JSX structure (1 ms)
    ✓ contains prompt text with cyan color (1 ms)
    ✓ contains placeholder text with dim color

PASS test/unit/inter-agent-communication.test.js
  Inter-Agent Communication
    sendMessage
      ✓ should fail without required parameters (1 ms)
      ✓ should fail with invalid message type
      ✓ should successfully send status_update message
      ✓ should send request_help message with high priority
      ✓ should handle share_result message with large content
      ✓ should send coordination message between siblings
    receiveMessages
      ✓ should return empty array when no messages exist
      ✓ should filter messages by type
      ✓ should limit number of messages returned
      ✓ should mark messages as read
      ✓ should include sender information
    Message Queue Management
      ✓ should automatically cleanup old messages
      ✓ should handle message queue size limits
    Agent Relationship Tracking
      ✓ should track parent-child relationships when spawning agents
      ✓ should allow sibling agents to message each other
    Error Handling
      ✓ should handle missing agent context gracefully
      ✓ should validate message content length
      ✓ should handle corrupted message queue gracefully

PASS test/unit/model-providers.test.js
  Model Provider Session ID Tracking
    AnthropicProvider
      Session ID Generation
        ✓ should generate UUID when no conversation ID provided (1 ms)
        ✓ should use provided conversation ID when available
        ✓ should generate different session IDs for different conversations
        ✓ should handle messages without user role
      Conversation Key Generation
        ✓ should generate consistent keys for same first user message
        ✓ should truncate long user messages in key
        ✓ should replace spaces with underscores in key
        ✓ should fallback to timestamp-based key when no user message (1 ms)
      Session Tracking
        ✓ should maintain separate session maps per provider instance
        ✓ should track multiple conversations in same provider
    OpenAIProvider
      Session ID Generation
        ✓ should generate UUID when no conversation ID provided
        ✓ should use provided conversation ID when available
        ✓ should generate consistent session IDs for same conversation
      Chat Method Integration
        ✓ should generate session ID in chat method
    LocalProvider
      Session ID Generation
        ✓ should generate UUID when no conversation ID provided
        ✓ should use provided conversation ID when available
        ✓ should generate consistent session IDs for same conversation
      Chat Method Integration
        ✓ should generate session ID in chat method
    Cross-Provider Session Isolation
      ✓ should maintain independent session tracking across providers

PASS test/ui/e2e/step2-e2e.test.js
  Step 2 E2E: Basic Layout Structure
    ✓ all required component files exist (1 ms)
    ✓ component files contain expected exports
    ✓ App imports all required components
    ✓ manual verification: Step 2 acceptance criteria

PASS test/unit/completion/FilesAndDirectoriesCompletionProvider.test.ts
  FilesAndDirectoriesCompletionProvider Enhanced
    Context Handling
      ✓ should handle non-command contexts
      ✓ should handle multiline contexts (1 ms)
    Basic Completion Functionality
      ✓ should return completions for file patterns (1 ms)
      ✓ should add trailing slash to directories
      ✓ should prioritize directories over files
    Enhanced Fuzzy Search
      ✓ should perform recursive directory traversal (1 ms)
      ✓ should handle gitignore-like filtering
    Path-based Completion
      ✓ should handle explicit path completion
      ✓ should allow explicit traversal into normally ignored directories
    Error Handling
      ✓ should handle filesystem errors gracefully (1 ms)
      ✓ should handle non-existent directories
      ✓ should respect maxItems limit
    Configuration Management
      ✓ should update current working directory
      ✓ should resolve relative paths to absolute
      ✓ should manage hidden file visibility

PASS test/ui/components/ShellInput.scrolling.test.tsx
  Completion Viewport Scrolling Logic
    ✓ should keep viewport at 0 when items fit in view (1 ms)
    ✓ should scroll down when selection moves past end of viewport
    ✓ should scroll down multiple items when jumping far down
    ✓ should scroll up when selection moves before start of viewport
    ✓ should not scroll when selection is within viewport
    ✓ should handle edge case at end of list
  Completion Scroll Indicators
    ✓ should show no indicators when all items fit (1 ms)
    ✓ should show only below indicator at start of large list
    ✓ should show only above indicator at end of large list
    ✓ should show both indicators in middle of large list
    ✓ should calculate correct counts for various positions
  Completion Modal Slicing
    ✓ should return all items when list is small
    ✓ should return first 8 items when starting at viewport 0
    ✓ should return correct slice when scrolled down
    ✓ should handle partial slice at end of list (1 ms)
  Completion Selection Logic
    ✓ should highlight only the selected item
    ✓ should work with viewport offsets
  ShellInput Completion Integration
    ✓ should have working completion scrolling implementation

PASS test/unit/completion/CompletionManager.test.js
  CompletionManager
    provider management
      ✓ should add providers
      ✓ should remove providers
    getCompletions
      ✓ should route to appropriate provider (1 ms)
      ✓ should extract slash command prefix correctly
      ✓ should extract word prefix for non-commands (1 ms)
      ✓ should merge with history completions
      ✓ should limit total items
      ✓ should fallback to history on provider error
      ✓ should return history when no provider handles context
    history management
      ✓ should update history (1 ms)
      ✓ should filter exact matches from history completions
      ✓ should limit history items
    options management
      ✓ should get current options
      ✓ should update options

PASS test/ui/components/App.test.tsx
  Step 1: Basic Ink App Setup
    ✓ step 1 and 2 foundation complete (1 ms)
    ✓ typescript and jsx support working
    ✓ project structure correct

PASS test/unit/completion/FileCompletionProvider.test.js
  FileCompletionProvider
    canHandle
      ✓ should handle non-command contexts (1 ms)
      ✓ should not handle slash commands on first line
      ✓ should handle slash commands on non-first lines
    getCompletions
      ✓ should return file completions (1 ms)
      ✓ should prioritize directories over files
      ✓ should add trailing slash to directories
      ✓ should handle empty directory gracefully
      ✓ should handle filesystem errors gracefully
      ✓ should filter hidden files unless requested
      ✓ should include hidden files when prefix starts with dot (1 ms)
      ✓ should respect maxItems limit
    directory management
      ✓ should update current working directory
      ✓ should resolve relative paths to absolute

FAIL test/ui/unit/lace-ui-activity.test.ts
  ● Test suite failed to run

    Configuration error:

    Could not locate module ../../../src/logging/activity-logger.js mapped as:
    $1.

    Please check your configuration for these entries:
    {
      "moduleNameMapper": {
        "/^(\.{1,2}\/.*)\.js$/": "$1"
      },
      "resolver": undefined
    }

       7 |
       8 | // Mock all dependencies
    >  9 | jest.mock('../../../src/logging/activity-logger.js');
         |      ^
      10 | // Mock backend dependencies with simple implementations
      11 | jest.mock('../../../src/database/conversation-db.js');
      12 | jest.mock('../../../src/tools/tool-registry.js');

      at createNoMappedModuleFoundError (node_modules/jest-resolve/build/resolver.js:759:17)
      at test/ui/unit/lace-ui-activity.test.ts:9:6

FAIL test/ui/integration/activity-logging.test.tsx
  ● Test suite failed to run

    [96mtest/ui/integration/activity-logging.test.tsx[0m:[93m15[0m:[93m40[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ unmount: Mock<UnknownFunction>; }' is not assignable to parameter of type 'never'.

    [7m15[0m     start: jest.fn().mockResolvedValue({ unmount: jest.fn() })
    [7m  [0m [91m                                       ~~~~~~~~~~~~~~~~~~~~~~[0m

FAIL test/unit/safety/approval-engine.test.ts
  ● Test suite failed to run

    [96mtest/unit/safety/approval-engine.test.ts[0m:[93m84[0m:[93m22[0m - [91merror[0m[90m TS2339: [0mProperty 'approved' does not exist on type 'Promise<ApprovalResult>'.

    [7m84[0m       expect(result?.approved).toBe(false);
    [7m  [0m [91m                     ~~~~~~~~[0m

      [96mtest/unit/safety/approval-engine.test.ts[0m:[93m84[0m:[93m22[0m
        [7m84[0m       expect(result?.approved).toBe(false);
        [7m  [0m [96m                     ~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtest/unit/safety/approval-engine.test.ts[0m:[93m85[0m:[93m22[0m - [91merror[0m[90m TS2339: [0mProperty 'reason' does not exist on type 'Promise<ApprovalResult>'.

    [7m85[0m       expect(result?.reason).toBe('Tool is on deny list');
    [7m  [0m [91m                     ~~~~~~[0m

      [96mtest/unit/safety/approval-engine.test.ts[0m:[93m85[0m:[93m22[0m
        [7m85[0m       expect(result?.reason).toBe('Tool is on deny list');
        [7m  [0m [96m                     ~~~~~~[0m
        Did you forget to use 'await'?
    [96mtest/unit/safety/approval-engine.test.ts[0m:[93m206[0m:[93m22[0m - [91merror[0m[90m TS2339: [0mProperty 'approved' does not exist on type 'Promise<ApprovalResult>'.

    [7m206[0m       expect(result?.approved).toBe(true);
    [7m   [0m [91m                     ~~~~~~~~[0m

      [96mtest/unit/safety/approval-engine.test.ts[0m:[93m206[0m:[93m22[0m
        [7m206[0m       expect(result?.approved).toBe(true);
        [7m   [0m [96m                     ~~~~~~~~[0m
        Did you forget to use 'await'?
    [96mtest/unit/safety/approval-engine.test.ts[0m:[93m207[0m:[93m22[0m - [91merror[0m[90m TS2339: [0mProperty 'reason' does not exist on type 'Promise<ApprovalResult>'.

    [7m207[0m       expect(result?.reason).toBe('Tool is on auto-approve list');
    [7m   [0m [91m                     ~~~~~~[0m

      [96mtest/unit/safety/approval-engine.test.ts[0m:[93m207[0m:[93m22[0m
        [7m207[0m       expect(result?.reason).toBe('Tool is on auto-approve list');
        [7m   [0m [96m                     ~~~~~~[0m
        Did you forget to use 'await'?

FAIL test/ui/commands/activity-commands.test.ts
  ● Test suite failed to run

    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m63[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; local_session_id: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m63[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m  [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m65[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m65[0m       const result = await commandManager.executeCommand('/activity', context);
    [7m  [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m82[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type 'any[]' is not assignable to parameter of type 'never'.

    [7m82[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m  [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m84[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m84[0m       await commandManager.executeCommand('/activity 10', context);
    [7m  [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m90[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m90[0m       const result = await commandManager.executeCommand('/activity invalid', context);
    [7m  [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m97[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m97[0m       await commandManager.executeCommand('/activity 1000', context);
    [7m  [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m114[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m114[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m116[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m116[0m       const result = await commandManager.executeCommand('/activity recent', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m123[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type 'undefined[]' is not assignable to parameter of type 'never'.

    [7m123[0m       mockLaceUI.getRecentActivity.mockResolvedValue([]);
    [7m   [0m [91m                                                     ~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m125[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m125[0m       await commandManager.executeCommand('/activity recent 5', context);
    [7m   [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m143[0m:[93m55[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; local_session_id: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m143[0m       mockLaceUI.getSessionActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                      ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m145[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m145[0m       const result = await commandManager.executeCommand('/activity session', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m160[0m:[93m55[0m - [91merror[0m[90m TS2345: [0mArgument of type 'any[]' is not assignable to parameter of type 'never'.

    [7m160[0m       mockLaceUI.getSessionActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                      ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m162[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m162[0m       await commandManager.executeCommand(`/activity session ${targetSessionId}`, context);
    [7m   [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m168[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m168[0m       const result = await commandManager.executeCommand('/activity session invalid-format', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m190[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m190[0m       mockLaceUI.getActivityByType.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m192[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m192[0m       const result = await commandManager.executeCommand('/activity type tool_execution', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m204[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m204[0m       const result = await commandManager.executeCommand('/activity type invalid_type', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m211[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m211[0m       const result = await commandManager.executeCommand('/activity type invalid', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m231[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m231[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m233[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m233[0m       await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m254[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m254[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m256[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m256[0m       await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m277[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m277[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m279[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m279[0m       await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m300[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m300[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m302[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m302[0m       await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m323[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m323[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m325[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m325[0m       const result = await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m347[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type '{ id: number; timestamp: string; event_type: string; data: string; }[]' is not assignable to parameter of type 'never'.

    [7m347[0m       mockLaceUI.getRecentActivity.mockResolvedValue(mockEvents);
    [7m   [0m [91m                                                     ~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m349[0m:[93m28[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m349[0m       await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                           ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m363[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type 'Error' is not assignable to parameter of type 'never'.

    [7m363[0m       mockLaceUI.getRecentActivity.mockRejectedValue(new Error('Database error'));
    [7m   [0m [91m                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m365[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m365[0m       const result = await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m373[0m:[93m54[0m - [91merror[0m[90m TS2345: [0mArgument of type 'undefined[]' is not assignable to parameter of type 'never'.

    [7m373[0m       mockLaceUI.getRecentActivity.mockResolvedValue([]);
    [7m   [0m [91m                                                     ~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m375[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m375[0m       const result = await commandManager.executeCommand('/activity', context);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m391[0m:[93m43[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m391[0m       const result = await commandManager.executeCommand('/activity', contextWithoutAgent);
    [7m   [0m [91m                                          ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m400[0m:[93m47[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m400[0m       const helpResult = await commandManager.executeCommand('/help activity', context);
    [7m   [0m [91m                                              ~~~~~~~~~~~~~~[0m
    [96mtest/ui/commands/activity-commands.test.ts[0m:[93m410[0m:[93m47[0m - [91merror[0m[90m TS2339: [0mProperty 'executeCommand' does not exist on type 'CommandManager'.

    [7m410[0m       const helpResult = await commandManager.executeCommand('/help', context);
    [7m   [0m [91m                                              ~~~~~~~~~~~~~~[0m

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/unit/parallel-execution.test.js (52.095 s)
  Parallel Tool Execution
    Basic Parallel Execution
      ✕ should execute multiple tools in parallel using Promise.all() (5003 ms)
      ✕ should handle mixed success and failure in parallel execution (5001 ms)
    Concurrency Limits
      ✕ should respect maxConcurrentTools limit (5002 ms)
      ✕ should use role-based default maxConcurrentTools (5001 ms)
    Tool Approval with Parallel Execution
      ✕ should handle tool approval for each parallel tool call (5001 ms)
      ✕ should handle denied tools in parallel execution (5000 ms)
    Error Recovery and Resilience
      ✕ should continue parallel execution when some tools fail (5000 ms)
    Performance and Timing
      ✕ should demonstrate significant performance improvement over sequential execution (5001 ms)
    Edge Cases
      ✕ should handle empty tool calls array (5002 ms)
      ✕ should handle single tool call (no parallelization needed) (5001 ms)

  ● Parallel Tool Execution › Basic Parallel Execution › should execute multiple tools in parallel using Promise.all()

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Basic Parallel Execution › should handle mixed success and failure in parallel execution

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Concurrency Limits › should respect maxConcurrentTools limit

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Concurrency Limits › should use role-based default maxConcurrentTools

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Tool Approval with Parallel Execution › should handle tool approval for each parallel tool call

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Tool Approval with Parallel Execution › should handle denied tools in parallel execution

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Error Recovery and Resilience › should continue parallel execution when some tools fail

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Performance and Timing › should demonstrate significant performance improvement over sequential execution

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Edge Cases › should handle empty tool calls array

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

  ● Parallel Tool Execution › Edge Cases › should handle single tool call (no parallelization needed)

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      12 |   let callTimestamps;
      13 |
    > 14 |   beforeEach(async () => {
         |   ^
      15 |     harness = new TestHarness();
      16 |     callOrder = [];
      17 |     callTimestamps = [];

      at beforeEach (test/unit/parallel-execution.test.js:14:3)
      at describe (test/unit/parallel-execution.test.js:7:1)

FAIL test/unit/database.test.js (52.112 s)
  Conversation Database
    Database Initialization
      ✕ should initialize database and create tables (5002 ms)
      ✕ should handle database path creation (5001 ms)
    Message Storage
      ✕ should save and retrieve messages (5001 ms)
      ✕ should save tool calls with messages (5001 ms)
    Session Management
      ✕ should isolate conversations by session (5000 ms)
      ✕ should limit conversation history retrieval (5002 ms)
    Search Functionality
      ✕ should search conversation content (5000 ms)
    Generation Tracking
      ✕ should track agent generations (5000 ms)
      ✕ should save handoff information (5001 ms)
    Error Handling
      ✕ should handle database connection errors gracefully (5000 ms)

  ● Conversation Database › Database Initialization › should initialize database and create tables

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |
      18 |   describe('Database Initialization', () => {
    > 19 |     test('should initialize database and create tables', async () => {
         |     ^
      20 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      21 |       
      22 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:19:5)
      at describe (test/unit/database.test.js:18:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Database Initialization › should handle database path creation

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      33 |     });
      34 |
    > 35 |     test('should handle database path creation', async () => {
         |     ^
      36 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      37 |       
      38 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:35:5)
      at describe (test/unit/database.test.js:18:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Message Storage › should save and retrieve messages

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      47 |
      48 |   describe('Message Storage', () => {
    > 49 |     test('should save and retrieve messages', async () => {
         |     ^
      50 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      51 |       
      52 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:49:5)
      at describe (test/unit/database.test.js:48:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Message Storage › should save tool calls with messages

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      75 |     });
      76 |
    > 77 |     test('should save tool calls with messages', async () => {
         |     ^
      78 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      79 |       
      80 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:77:5)
      at describe (test/unit/database.test.js:48:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Session Management › should isolate conversations by session

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      100 |
      101 |   describe('Session Management', () => {
    > 102 |     test('should isolate conversations by session', async () => {
          |     ^
      103 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      104 |       
      105 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:102:5)
      at describe (test/unit/database.test.js:101:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Session Management › should limit conversation history retrieval

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      121 |     });
      122 |
    > 123 |     test('should limit conversation history retrieval', async () => {
          |     ^
      124 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      125 |       
      126 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:123:5)
      at describe (test/unit/database.test.js:101:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Search Functionality › should search conversation content

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      146 |
      147 |   describe('Search Functionality', () => {
    > 148 |     test('should search conversation content', async () => {
          |     ^
      149 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      150 |       
      151 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:148:5)
      at describe (test/unit/database.test.js:147:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Generation Tracking › should track agent generations

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      173 |
      174 |   describe('Generation Tracking', () => {
    > 175 |     test('should track agent generations', async () => {
          |     ^
      176 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      177 |       
      178 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:175:5)
      at describe (test/unit/database.test.js:174:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Generation Tracking › should save handoff information

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      196 |     });
      197 |
    > 198 |     test('should save handoff information', async () => {
          |     ^
      199 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      200 |       
      201 |       const dbPath = await harness.createTestDatabase();

      at test (test/unit/database.test.js:198:5)
      at describe (test/unit/database.test.js:174:3)
      at describe (test/unit/database.test.js:7:1)

  ● Conversation Database › Error Handling › should handle database connection errors gracefully

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      218 |
      219 |   describe('Error Handling', () => {
    > 220 |     test('should handle database connection errors gracefully', async () => {
          |     ^
      221 |       const { ConversationDB } = await import('../../src/database/conversation-db.js');
      222 |       
      223 |       // Try to initialize with invalid path

      at test (test/unit/database.test.js:220:5)
      at describe (test/unit/database.test.js:219:3)
      at describe (test/unit/database.test.js:7:1)

FAIL test/web-companion/integration/basic-integration.test.js (25.095 s)
  Web Companion Basic Integration
    ✕ should start web server successfully (5002 ms)
    ✕ should stop web server gracefully (5001 ms)
    ✕ should initialize with required components (5000 ms)
    ✕ should validate port conflict handling (5001 ms)
    ✕ should validate web companion integration with Lace (5000 ms)

  ● Web Companion Basic Integration › should start web server successfully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      13 |   const testPort = 3001;
      14 |
    > 15 |   beforeEach(async () => {
         |   ^
      16 |     // Initialize fresh components for each test
      17 |     activityLogger = new ActivityLogger();
      18 |     db = new ConversationDB(':memory:'); // Use in-memory database for tests

      at beforeEach (test/web-companion/integration/basic-integration.test.js:15:3)
      at describe (test/web-companion/integration/basic-integration.test.js:9:1)

  ● Web Companion Basic Integration › should start web server successfully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/basic-integration.test.js:41:28)

  ● Web Companion Basic Integration › should stop web server gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      13 |   const testPort = 3001;
      14 |
    > 15 |   beforeEach(async () => {
         |   ^
      16 |     // Initialize fresh components for each test
      17 |     activityLogger = new ActivityLogger();
      18 |     db = new ConversationDB(':memory:'); // Use in-memory database for tests

      at beforeEach (test/web-companion/integration/basic-integration.test.js:15:3)
      at describe (test/web-companion/integration/basic-integration.test.js:9:1)

  ● Web Companion Basic Integration › should stop web server gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/basic-integration.test.js:41:28)

  ● Web Companion Basic Integration › should initialize with required components

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      13 |   const testPort = 3001;
      14 |
    > 15 |   beforeEach(async () => {
         |   ^
      16 |     // Initialize fresh components for each test
      17 |     activityLogger = new ActivityLogger();
      18 |     db = new ConversationDB(':memory:'); // Use in-memory database for tests

      at beforeEach (test/web-companion/integration/basic-integration.test.js:15:3)
      at describe (test/web-companion/integration/basic-integration.test.js:9:1)

  ● Web Companion Basic Integration › should initialize with required components

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/basic-integration.test.js:41:28)

  ● Web Companion Basic Integration › should validate port conflict handling

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      13 |   const testPort = 3001;
      14 |
    > 15 |   beforeEach(async () => {
         |   ^
      16 |     // Initialize fresh components for each test
      17 |     activityLogger = new ActivityLogger();
      18 |     db = new ConversationDB(':memory:'); // Use in-memory database for tests

      at beforeEach (test/web-companion/integration/basic-integration.test.js:15:3)
      at describe (test/web-companion/integration/basic-integration.test.js:9:1)

  ● Web Companion Basic Integration › should validate port conflict handling

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/basic-integration.test.js:41:28)

  ● Web Companion Basic Integration › should validate web companion integration with Lace

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      13 |   const testPort = 3001;
      14 |
    > 15 |   beforeEach(async () => {
         |   ^
      16 |     // Initialize fresh components for each test
      17 |     activityLogger = new ActivityLogger();
      18 |     db = new ConversationDB(':memory:'); // Use in-memory database for tests

      at beforeEach (test/web-companion/integration/basic-integration.test.js:15:3)
      at describe (test/web-companion/integration/basic-integration.test.js:9:1)

  ● Web Companion Basic Integration › should validate web companion integration with Lace

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/basic-integration.test.js:41:28)

FAIL test/ui/integration/step13-lace-backend.test.tsx (52.206 s)
  Step 13: Connect to Lace Backend
    ✓ LaceUI initializes with real lace backend components (2 ms)
    ✕ LaceUI creates primary agent with correct configuration (4999 ms)
    ✕ handleMessage processes input through real agent (5001 ms)
    ✕ handleMessage processes tool calls and formats agent activities (5001 ms)
    ✕ handleMessage handles streaming tokens through callback (5000 ms)
    ✕ handleMessage handles abort signal correctly (5002 ms)
    ✕ handleAbort cancels ongoing operation (5001 ms)
    ✕ handleAbort returns false when no operation is running (5001 ms)
    ✕ formatAgentActivities handles various response types (5001 ms)
    ✕ getStatus returns comprehensive agent status (5001 ms)
    ✕ prevents concurrent message processing (5001 ms)

  ● Step 13: Connect to Lace Backend › LaceUI creates primary agent with correct configuration

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      108 |   });
      109 |
    > 110 |   test('LaceUI creates primary agent with correct configuration', async () => {
          |   ^
      111 |     await laceUI.start();
      112 |     
      113 |     expect(laceUI.primaryAgent).toBeTruthy();

      at test/ui/integration/step13-lace-backend.test.tsx:110:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › handleMessage processes input through real agent

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      119 |   });
      120 |
    > 121 |   test('handleMessage processes input through real agent', async () => {
          |   ^
      122 |     await laceUI.start();
      123 |     
      124 |     // Mock the agent processInput method to return a controlled response

      at test/ui/integration/step13-lace-backend.test.tsx:121:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › handleMessage processes tool calls and formats agent activities

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      151 |   });
      152 |
    > 153 |   test('handleMessage processes tool calls and formats agent activities', async () => {
          |   ^
      154 |     await laceUI.start();
      155 |     
      156 |     const mockResponse = {

      at test/ui/integration/step13-lace-backend.test.tsx:153:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › handleMessage handles streaming tokens through callback

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      180 |   });
      181 |
    > 182 |   test('handleMessage handles streaming tokens through callback', async () => {
          |   ^
      183 |     await laceUI.start();
      184 |     
      185 |     const mockTokens: string[] = [];

      at test/ui/integration/step13-lace-backend.test.tsx:182:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › handleMessage handles abort signal correctly

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      219 |   });
      220 |
    > 221 |   test('handleMessage handles abort signal correctly', async () => {
          |   ^
      222 |     await laceUI.start();
      223 |     
      224 |     // Mock agent to simulate abortable operation

      at test/ui/integration/step13-lace-backend.test.tsx:221:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › handleAbort cancels ongoing operation

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      236 |   });
      237 |
    > 238 |   test('handleAbort cancels ongoing operation', async () => {
          |   ^
      239 |     await laceUI.start();
      240 |     
      241 |     // Start processing

      at test/ui/integration/step13-lace-backend.test.tsx:238:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › handleAbort returns false when no operation is running

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      249 |   });
      250 |
    > 251 |   test('handleAbort returns false when no operation is running', async () => {
          |   ^
      252 |     await laceUI.start();
      253 |     
      254 |     const aborted = laceUI.handleAbort();

      at test/ui/integration/step13-lace-backend.test.tsx:251:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › formatAgentActivities handles various response types

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      257 |   });
      258 |
    > 259 |   test('formatAgentActivities handles various response types', async () => {
          |   ^
      260 |     await laceUI.start();
      261 |     
      262 |     // Test with denied tool

      at test/ui/integration/step13-lace-backend.test.tsx:259:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › getStatus returns comprehensive agent status

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      292 |   });
      293 |
    > 294 |   test('getStatus returns comprehensive agent status', async () => {
          |   ^
      295 |     await laceUI.start();
      296 |     
      297 |     // Mock context usage calculation

      at test/ui/integration/step13-lace-backend.test.tsx:294:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  ● Step 13: Connect to Lace Backend › prevents concurrent message processing

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      322 |   });
      323 |
    > 324 |   test('prevents concurrent message processing', async () => {
          |   ^
      325 |     await laceUI.start();
      326 |     
      327 |     let resolveFirst: any;

      at test/ui/integration/step13-lace-backend.test.tsx:324:3
      at test/ui/integration/step13-lace-backend.test.tsx:54:1

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/unit/agents.test.js (57.134 s)
  Agent System
    Agent Construction
      ✕ should create agent with assigned role and model (5004 ms)
      ✕ should build appropriate system prompt for role (5001 ms)
    Task Analysis
      ✕ should choose planning agent for planning tasks (5003 ms)
      ✕ should choose execution agent for simple tasks (5002 ms)
      ✕ should choose reasoning agent for complex analysis (5001 ms)
    Tool Integration
      ✕ should build tools for LLM format (5001 ms)
      ✕ should convert tool parameters correctly (5001 ms)
    Subagent Spawning
      ✕ should spawn subagent with correct configuration (5001 ms)
    Context Management
      ✕ should track context size (5001 ms)
      ✕ should detect when handoff is needed (5001 ms)
    Error Handling
      ✕ should handle tool execution errors gracefully (5002 ms)

  ● Agent System › Agent Construction › should create agent with assigned role and model

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |
      18 |   describe('Agent Construction', () => {
    > 19 |     test('should create agent with assigned role and model', async () => {
         |     ^
      20 |       const agent = await harness.createTestAgent({
      21 |         role: 'planning',
      22 |         assignedModel: 'claude-3-5-sonnet-20241022',

      at test (test/unit/agents.test.js:19:5)
      at describe (test/unit/agents.test.js:18:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Agent Construction › should build appropriate system prompt for role

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      31 |     });
      32 |
    > 33 |     test('should build appropriate system prompt for role', async () => {
         |     ^
      34 |       const planningAgent = await harness.createTestAgent({ role: 'planning' });
      35 |       const executionAgent = await harness.createTestAgent({ role: 'execution' });
      36 |

      at test (test/unit/agents.test.js:33:5)
      at describe (test/unit/agents.test.js:18:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Task Analysis › should choose planning agent for planning tasks

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      45 |
      46 |   describe('Task Analysis', () => {
    > 47 |     test('should choose planning agent for planning tasks', async () => {
         |     ^
      48 |       const agent = await harness.createTestAgent({ role: 'orchestrator' });
      49 |       
      50 |       const config = agent.chooseAgentForTask('plan authentication system');

      at test (test/unit/agents.test.js:47:5)
      at describe (test/unit/agents.test.js:46:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Task Analysis › should choose execution agent for simple tasks

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      54 |     });
      55 |
    > 56 |     test('should choose execution agent for simple tasks', async () => {
         |     ^
      57 |       const agent = await harness.createTestAgent({ role: 'orchestrator' });
      58 |       
      59 |       const config = agent.chooseAgentForTask('list files');

      at test (test/unit/agents.test.js:56:5)
      at describe (test/unit/agents.test.js:46:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Task Analysis › should choose reasoning agent for complex analysis

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      63 |     });
      64 |
    > 65 |     test('should choose reasoning agent for complex analysis', async () => {
         |     ^
      66 |       const agent = await harness.createTestAgent({ role: 'orchestrator' });
      67 |       
      68 |       const config = agent.chooseAgentForTask('debug this error');

      at test (test/unit/agents.test.js:65:5)
      at describe (test/unit/agents.test.js:46:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Tool Integration › should build tools for LLM format

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      74 |
      75 |   describe('Tool Integration', () => {
    > 76 |     test('should build tools for LLM format', async () => {
         |     ^
      77 |       const agent = await harness.createTestAgent();
      78 |       
      79 |       const tools = agent.buildToolsForLLM();

      at test (test/unit/agents.test.js:76:5)
      at describe (test/unit/agents.test.js:75:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Tool Integration › should convert tool parameters correctly

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      88 |     });
      89 |
    > 90 |     test('should convert tool parameters correctly', async () => {
         |     ^
      91 |       const agent = await harness.createTestAgent();
      92 |       
      93 |       const parameters = { 

      at test (test/unit/agents.test.js:90:5)
      at describe (test/unit/agents.test.js:75:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Subagent Spawning › should spawn subagent with correct configuration

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      107 |
      108 |   describe('Subagent Spawning', () => {
    > 109 |     test('should spawn subagent with correct configuration', async () => {
          |     ^
      110 |       const orchestrator = await harness.createTestAgent({ role: 'orchestrator' });
      111 |       
      112 |       const subagent = await orchestrator.spawnSubagent({

      at test (test/unit/agents.test.js:109:5)
      at describe (test/unit/agents.test.js:108:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Context Management › should track context size

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      124 |
      125 |   describe('Context Management', () => {
    > 126 |     test('should track context size', async () => {
          |     ^
      127 |       const agent = await harness.createTestAgent();
      128 |       
      129 |       assert.strictEqual(agent.contextSize, 0, 'Should start with zero context size');

      at test (test/unit/agents.test.js:126:5)
      at describe (test/unit/agents.test.js:125:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Context Management › should detect when handoff is needed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      132 |     });
      133 |
    > 134 |     test('should detect when handoff is needed', async () => {
          |     ^
      135 |       const agent = await harness.createTestAgent();
      136 |       
      137 |       // Simulate large context

      at test (test/unit/agents.test.js:134:5)
      at describe (test/unit/agents.test.js:125:3)
      at describe (test/unit/agents.test.js:7:1)

  ● Agent System › Error Handling › should handle tool execution errors gracefully

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      143 |
      144 |   describe('Error Handling', () => {
    > 145 |     test('should handle tool execution errors gracefully', async () => {
          |     ^
      146 |       const agent = await harness.createTestAgent();
      147 |       
      148 |       // Test with invalid tool call

      at test (test/unit/agents.test.js:145:5)
      at describe (test/unit/agents.test.js:144:3)
      at describe (test/unit/agents.test.js:7:1)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/integration.test.js (67.132 s)
  Lace Integration Tests
    System Initialization
      ✕ should initialize all core systems (5002 ms)
      ✕ should have all required tools available (5001 ms)
      ✕ should prepare tools for LLM format (5001 ms)
    Agent Coordination
      ✕ should spawn subagents with correct configuration (5001 ms)
      ✕ should analyze tasks and choose appropriate agents (5000 ms)
    Tool Integration
      ✕ should execute file operations through agent (5001 ms)
      ✕ should execute JavaScript calculations (5000 ms)
      ✕ should handle shell commands (5001 ms)
    Conversation Persistence
      ✕ should save and retrieve conversation history (5001 ms)
      ✕ should maintain session isolation (5000 ms)
    Error Handling
      ✕ should handle tool execution errors gracefully (5001 ms)
      ✕ should handle file operation errors (5001 ms)
    Context Management
      ✕ should track context size and handoff conditions (5001 ms)

  ● Lace Integration Tests › System Initialization › should initialize all core systems

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |
      18 |   describe('System Initialization', () => {
    > 19 |     test('should initialize all core systems', async () => {
         |     ^
      20 |       const lace = await harness.createTestLace();
      21 |       
      22 |       assert.ok(lace.db, 'Should have database');

      at test (test/integration.test.js:19:5)
      at describe (test/integration.test.js:18:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › System Initialization › should have all required tools available

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      26 |     });
      27 |
    > 28 |     test('should have all required tools available', async () => {
         |     ^
      29 |       const lace = await harness.createTestLace();
      30 |       
      31 |       const tools = lace.tools.listTools();

      at test (test/integration.test.js:28:5)
      at describe (test/integration.test.js:18:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › System Initialization › should prepare tools for LLM format

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      37 |     });
      38 |
    > 39 |     test('should prepare tools for LLM format', async () => {
         |     ^
      40 |       const lace = await harness.createTestLace();
      41 |       
      42 |       const toolsForLLM = lace.primaryAgent.buildToolsForLLM();

      at test (test/integration.test.js:39:5)
      at describe (test/integration.test.js:18:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Agent Coordination › should spawn subagents with correct configuration

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      54 |
      55 |   describe('Agent Coordination', () => {
    > 56 |     test('should spawn subagents with correct configuration', async () => {
         |     ^
      57 |       const lace = await harness.createTestLace();
      58 |       
      59 |       const subagent = await lace.primaryAgent.spawnSubagent({

      at test (test/integration.test.js:56:5)
      at describe (test/integration.test.js:55:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Agent Coordination › should analyze tasks and choose appropriate agents

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      69 |     });
      70 |
    > 71 |     test('should analyze tasks and choose appropriate agents', async () => {
         |     ^
      72 |       const lace = await harness.createTestLace();
      73 |       
      74 |       const testCases = [

      at test (test/integration.test.js:71:5)
      at describe (test/integration.test.js:55:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Tool Integration › should execute file operations through agent

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      88 |
      89 |   describe('Tool Integration', () => {
    > 90 |     test('should execute file operations through agent', async () => {
         |     ^
      91 |       const lace = await harness.createTestLace();
      92 |       
      93 |       // Create a temp file to test with

      at test (test/integration.test.js:90:5)
      at describe (test/integration.test.js:89:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Tool Integration › should execute JavaScript calculations

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      104 |     });
      105 |
    > 106 |     test('should execute JavaScript calculations', async () => {
          |     ^
      107 |       const lace = await harness.createTestLace();
      108 |       
      109 |       const result = await lace.primaryAgent.executeTool({

      at test (test/integration.test.js:106:5)
      at describe (test/integration.test.js:89:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Tool Integration › should handle shell commands

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      116 |     });
      117 |
    > 118 |     test('should handle shell commands', async () => {
          |     ^
      119 |       const lace = await harness.createTestLace();
      120 |       
      121 |       const result = await lace.primaryAgent.executeTool({

      at test (test/integration.test.js:118:5)
      at describe (test/integration.test.js:89:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Conversation Persistence › should save and retrieve conversation history

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      130 |
      131 |   describe('Conversation Persistence', () => {
    > 132 |     test('should save and retrieve conversation history', async () => {
          |     ^
      133 |       const lace = await harness.createTestLace();
      134 |       
      135 |       const sessionId = 'integration-test-session';

      at test (test/integration.test.js:132:5)
      at describe (test/integration.test.js:131:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Conversation Persistence › should maintain session isolation

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      147 |     });
      148 |
    > 149 |     test('should maintain session isolation', async () => {
          |     ^
      150 |       const lace = await harness.createTestLace();
      151 |       
      152 |       await lace.db.saveMessage('session-1', 0, 'user', 'Message 1');

      at test (test/integration.test.js:149:5)
      at describe (test/integration.test.js:131:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Error Handling › should handle tool execution errors gracefully

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      163 |
      164 |   describe('Error Handling', () => {
    > 165 |     test('should handle tool execution errors gracefully', async () => {
          |     ^
      166 |       const lace = await harness.createTestLace();
      167 |       
      168 |       try {

      at test (test/integration.test.js:165:5)
      at describe (test/integration.test.js:164:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Error Handling › should handle file operation errors

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      177 |     });
      178 |
    > 179 |     test('should handle file operation errors', async () => {
          |     ^
      180 |       const lace = await harness.createTestLace();
      181 |       
      182 |       const result = await lace.primaryAgent.executeTool({

      at test (test/integration.test.js:179:5)
      at describe (test/integration.test.js:164:3)
      at describe (test/integration.test.js:7:1)

  ● Lace Integration Tests › Context Management › should track context size and handoff conditions

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      191 |
      192 |   describe('Context Management', () => {
    > 193 |     test('should track context size and handoff conditions', async () => {
          |     ^
      194 |       const lace = await harness.createTestLace();
      195 |       
      196 |       const agent = lace.primaryAgent;

      at test (test/integration.test.js:193:5)
      at describe (test/integration.test.js:192:3)
      at describe (test/integration.test.js:7:1)

FAIL test/unit/web-companion.test.js (67.164 s)
  Web Companion Tests
    WebServer Initialization
      ✕ should initialize with correct configuration (5003 ms)
      ✕ should start and stop gracefully (5001 ms)
    API Endpoints
      ✕ should respond to health check (5000 ms)
      ✕ should return sessions list (5000 ms)
      ✕ should return conversation messages for session (5000 ms)
      ✕ should return session statistics (5002 ms)
    Real-time Activity Streaming
      ✕ should accept WebSocket connections (5000 ms)
      ✕ should stream activity events in real-time (5001 ms)
      ✕ should support event filtering (5001 ms)
    Activity Event Processing
      ✕ should emit events when logging activity (5001 ms)
      ✕ should provide recent events for backfill (5002 ms)
    Error Handling
      ✕ should handle database unavailable gracefully (5001 ms)
      ✕ should handle nonexistent session requests gracefully (5001 ms)

  ● Web Companion Tests › WebServer Initialization › should initialize with correct configuration

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › WebServer Initialization › should initialize with correct configuration

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › WebServer Initialization › should start and stop gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › WebServer Initialization › should start and stop gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › API Endpoints › should respond to health check

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › API Endpoints › should respond to health check

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › API Endpoints › should return sessions list

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › API Endpoints › should return sessions list

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › API Endpoints › should return conversation messages for session

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › API Endpoints › should return conversation messages for session

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › API Endpoints › should return session statistics

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › API Endpoints › should return session statistics

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › Real-time Activity Streaming › should accept WebSocket connections

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › Real-time Activity Streaming › should accept WebSocket connections

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › Real-time Activity Streaming › should stream activity events in real-time

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › Real-time Activity Streaming › should stream activity events in real-time

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › Real-time Activity Streaming › should support event filtering

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › Real-time Activity Streaming › should support event filtering

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › Activity Event Processing › should emit events when logging activity

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › Activity Event Processing › should emit events when logging activity

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › Activity Event Processing › should provide recent events for backfill

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › Activity Event Processing › should provide recent events for backfill

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › Error Handling › should handle database unavailable gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › Error Handling › should handle database unavailable gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  ● Web Companion Tests › Error Handling › should handle nonexistent session requests gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      32 |   let activityDbPath;
      33 |
    > 34 |   beforeEach(async () => {
         |   ^
      35 |     testPort = 3001 + Math.floor(Math.random() * 1000); // Random port to avoid conflicts
      36 |     
      37 |     // Create test database and activity logger

      at beforeEach (test/unit/web-companion.test.js:34:3)
      at describe (test/unit/web-companion.test.js:26:1)

  ● Web Companion Tests › Error Handling › should handle nonexistent session requests gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/unit/web-companion.test.js:61:16)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/unit/activity-logger.test.js (72.162 s)
  ActivityLogger
    Database Initialization
      ✕ should initialize database and create tables (5003 ms)
      ✕ should create .lace directory if it does not exist (5002 ms)
    Event Logging
      ✕ should log events with all required fields (5000 ms)
      ✕ should handle string data directly (5001 ms)
      ✕ should handle null model session id (5000 ms)
      ✕ should not throw on logging errors (5001 ms)
    Event Querying
      ✕ should get all events in descending timestamp order (5000 ms)
      ✕ should filter by session id (5001 ms)
      ✕ should filter by event type (5000 ms)
      ✕ should limit results (5001 ms)
      ✕ should combine filters (5001 ms)
      ✕ should filter by timestamp (5001 ms)
    Database Management
      ✕ should close database connection (5001 ms)
      ✕ should handle multiple close calls gracefully (5001 ms)

  ● ActivityLogger › Database Initialization › should initialize database and create tables

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      33 |
      34 |   describe('Database Initialization', () => {
    > 35 |     test('should initialize database and create tables', async () => {
         |     ^
      36 |       await logger.initialize();
      37 |       
      38 |       // Check that the database file was created

      at test (test/unit/activity-logger.test.js:35:5)
      at describe (test/unit/activity-logger.test.js:34:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Database Initialization › should initialize database and create tables

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Database Initialization › should create .lace directory if it does not exist

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      45 |     });
      46 |
    > 47 |     test('should create .lace directory if it does not exist', async () => {
         |     ^
      48 |       const nestedPath = join(tmpdir(), 'test-lace-dir', 'activity.db');
      49 |       const nestedLogger = new ActivityLogger(nestedPath);
      50 |       

      at test (test/unit/activity-logger.test.js:47:5)
      at describe (test/unit/activity-logger.test.js:34:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Logging › should log events with all required fields

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      60 |
      61 |   describe('Event Logging', () => {
    > 62 |     beforeEach(async () => {
         |     ^
      63 |       await logger.initialize();
      64 |     });
      65 |

      at beforeEach (test/unit/activity-logger.test.js:62:5)
      at describe (test/unit/activity-logger.test.js:61:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Logging › should log events with all required fields

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Logging › should handle string data directly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      60 |
      61 |   describe('Event Logging', () => {
    > 62 |     beforeEach(async () => {
         |     ^
      63 |       await logger.initialize();
      64 |     });
      65 |

      at beforeEach (test/unit/activity-logger.test.js:62:5)
      at describe (test/unit/activity-logger.test.js:61:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Logging › should handle string data directly

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Logging › should handle null model session id

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      60 |
      61 |   describe('Event Logging', () => {
    > 62 |     beforeEach(async () => {
         |     ^
      63 |       await logger.initialize();
      64 |     });
      65 |

      at beforeEach (test/unit/activity-logger.test.js:62:5)
      at describe (test/unit/activity-logger.test.js:61:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Logging › should handle null model session id

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Logging › should not throw on logging errors

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      60 |
      61 |   describe('Event Logging', () => {
    > 62 |     beforeEach(async () => {
         |     ^
      63 |       await logger.initialize();
      64 |     });
      65 |

      at beforeEach (test/unit/activity-logger.test.js:62:5)
      at describe (test/unit/activity-logger.test.js:61:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Logging › should not throw on logging errors

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Querying › should get all events in descending timestamp order

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      118 |
      119 |   describe('Event Querying', () => {
    > 120 |     beforeEach(async () => {
          |     ^
      121 |       await logger.initialize();
      122 |       
      123 |       // Add some test events

      at beforeEach (test/unit/activity-logger.test.js:120:5)
      at describe (test/unit/activity-logger.test.js:119:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Querying › should get all events in descending timestamp order

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Querying › should filter by session id

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      118 |
      119 |   describe('Event Querying', () => {
    > 120 |     beforeEach(async () => {
          |     ^
      121 |       await logger.initialize();
      122 |       
      123 |       // Add some test events

      at beforeEach (test/unit/activity-logger.test.js:120:5)
      at describe (test/unit/activity-logger.test.js:119:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Querying › should filter by session id

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Querying › should filter by event type

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      118 |
      119 |   describe('Event Querying', () => {
    > 120 |     beforeEach(async () => {
          |     ^
      121 |       await logger.initialize();
      122 |       
      123 |       // Add some test events

      at beforeEach (test/unit/activity-logger.test.js:120:5)
      at describe (test/unit/activity-logger.test.js:119:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Querying › should filter by event type

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Querying › should limit results

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      118 |
      119 |   describe('Event Querying', () => {
    > 120 |     beforeEach(async () => {
          |     ^
      121 |       await logger.initialize();
      122 |       
      123 |       // Add some test events

      at beforeEach (test/unit/activity-logger.test.js:120:5)
      at describe (test/unit/activity-logger.test.js:119:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Querying › should limit results

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Querying › should combine filters

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      118 |
      119 |   describe('Event Querying', () => {
    > 120 |     beforeEach(async () => {
          |     ^
      121 |       await logger.initialize();
      122 |       
      123 |       // Add some test events

      at beforeEach (test/unit/activity-logger.test.js:120:5)
      at describe (test/unit/activity-logger.test.js:119:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Querying › should combine filters

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Event Querying › should filter by timestamp

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      118 |
      119 |   describe('Event Querying', () => {
    > 120 |     beforeEach(async () => {
          |     ^
      121 |       await logger.initialize();
      122 |       
      123 |       // Add some test events

      at beforeEach (test/unit/activity-logger.test.js:120:5)
      at describe (test/unit/activity-logger.test.js:119:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Event Querying › should filter by timestamp

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Database Management › should close database connection

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      190 |
      191 |   describe('Database Management', () => {
    > 192 |     test('should close database connection', async () => {
          |     ^
      193 |       await logger.initialize();
      194 |       await logger.close();
      195 |       

      at test (test/unit/activity-logger.test.js:192:5)
      at describe (test/unit/activity-logger.test.js:191:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Database Management › should close database connection

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  ● ActivityLogger › Database Management › should handle multiple close calls gracefully

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      203 |     });
      204 |
    > 205 |     test('should handle multiple close calls gracefully', async () => {
          |     ^
      206 |       await logger.initialize();
      207 |       await logger.close();
      208 |       await logger.close(); // Should not throw

      at test (test/unit/activity-logger.test.js:205:5)
      at describe (test/unit/activity-logger.test.js:191:3)
      at describe (test/unit/activity-logger.test.js:11:1)

  ● ActivityLogger › Database Management › should handle multiple close calls gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/unit/activity-logger.test.js:25:20)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

  console.warn
    Error closing database: this.db.close is not a function

       97 |       }
       98 |     } catch (error) {
    >  99 |       console.warn('Error closing database:', error.message);
          |               ^
      100 |     }
      101 |   });
      102 |

      at Object.warn (test/web-companion/unit/web-companion-basic.test.js:99:15)

FAIL test/web-companion/unit/web-companion-basic.test.js (77.273 s)
  Web Companion Real Component Tests
    Real WebServer Component Integration
      ✕ should initialize all required middleware components (5015 ms)
      ✕ should handle WebSocket connections with real Socket.io (5013 ms)
      ✕ should broadcast real activity events to connected clients (5004 ms)
    Real Database Integration Tests
      ✕ should handle conversation database operations correctly (5004 ms)
      ✕ should calculate session statistics correctly (5002 ms)
      ✕ should handle activity logger operations correctly (5001 ms)
    Real Event Filtering and Processing
      ✕ should filter events by session correctly (5002 ms)
      ✕ should handle WebSocket event filtering in real-time (5001 ms)
    Real Cost Calculation Integration
      ✕ should calculate costs based on actual token data (5003 ms)
    Real Message Deduplication and Ordering
      ✕ should maintain chronological order in real responses (5000 ms)
      ✕ should handle tool execution timeline correctly (5004 ms)
    Real Error Handling and Recovery
      ✕ should handle malformed JSON in activity data gracefully (5003 ms)
      ✕ should handle missing database tables gracefully (5001 ms)
    Real File System Integration
      ✕ should build actual directory tree (5003 ms)
      ✕ should perform actual file search operations (5003 ms)

  ● Web Companion Real Component Tests › Real WebServer Component Integration › should initialize all required middleware components

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real WebServer Component Integration › should handle WebSocket connections with real Socket.io

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real WebServer Component Integration › should broadcast real activity events to connected clients

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Database Integration Tests › should handle conversation database operations correctly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Database Integration Tests › should calculate session statistics correctly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Database Integration Tests › should handle activity logger operations correctly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Event Filtering and Processing › should filter events by session correctly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Event Filtering and Processing › should handle WebSocket event filtering in real-time

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Cost Calculation Integration › should calculate costs based on actual token data

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Message Deduplication and Ordering › should maintain chronological order in real responses

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Message Deduplication and Ordering › should handle tool execution timeline correctly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Error Handling and Recovery › should handle malformed JSON in activity data gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real Error Handling and Recovery › should handle missing database tables gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real File System Integration › should build actual directory tree

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

  ● Web Companion Real Component Tests › Real File System Integration › should perform actual file search operations

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      29 |   let baseUrl;
      30 |
    > 31 |   beforeEach(async () => {
         |   ^
      32 |     // Get available port for testing
      33 |     port = await getAvailablePort();
      34 |     baseUrl = `http://localhost:${port}`;

      at beforeEach (test/web-companion/unit/web-companion-basic.test.js:31:3)
      at describe (test/web-companion/unit/web-companion-basic.test.js:24:1)

FAIL test/web-companion/integration/web-companion-integration.test.js (98.201 s)
  Web Companion Integration Tests
    WebSocket Connectivity
      ✕ should establish WebSocket connection successfully (6003 ms)
      ✕ should receive activity events through WebSocket (6004 ms)
      ✕ should handle WebSocket disconnection gracefully (6004 ms)
    API Endpoints
      ✕ should respond to health check endpoint (6003 ms)
      ✕ should return sessions list (6003 ms)
      ✕ should handle invalid session ID gracefully (6002 ms)
      ✕ should return system metrics (6002 ms)
      ✕ should handle git status endpoint (6003 ms)
      ✕ should handle search endpoint (6003 ms)
    Real-time Updates
      ✕ should broadcast activity events to multiple WebSocket clients (6004 ms)
      ✕ should handle session subscription correctly (6001 ms)
    Error Handling and Resilience
      ✕ should handle database unavailable scenario gracefully (6003 ms)
      ✕ should handle activity logger gracefully (6003 ms)
      ✕ should handle malformed WebSocket messages gracefully (6002 ms)
    Performance and Scalability
      ✕ should handle multiple concurrent WebSocket connections (6003 ms)
      ✕ should handle rapid activity events without dropping data (6003 ms)

  ● Web Companion Integration Tests › WebSocket Connectivity › should establish WebSocket connection successfully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › WebSocket Connectivity › should establish WebSocket connection successfully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › WebSocket Connectivity › should receive activity events through WebSocket

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › WebSocket Connectivity › should receive activity events through WebSocket

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › WebSocket Connectivity › should handle WebSocket disconnection gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › WebSocket Connectivity › should handle WebSocket disconnection gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › API Endpoints › should respond to health check endpoint

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › API Endpoints › should respond to health check endpoint

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › API Endpoints › should return sessions list

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › API Endpoints › should return sessions list

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › API Endpoints › should handle invalid session ID gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › API Endpoints › should handle invalid session ID gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › API Endpoints › should return system metrics

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › API Endpoints › should return system metrics

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › API Endpoints › should handle git status endpoint

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › API Endpoints › should handle git status endpoint

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › API Endpoints › should handle search endpoint

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › API Endpoints › should handle search endpoint

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › Real-time Updates › should broadcast activity events to multiple WebSocket clients

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › Real-time Updates › should broadcast activity events to multiple WebSocket clients

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › Real-time Updates › should handle session subscription correctly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › Real-time Updates › should handle session subscription correctly

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › Error Handling and Resilience › should handle database unavailable scenario gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › Error Handling and Resilience › should handle database unavailable scenario gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › Error Handling and Resilience › should handle activity logger gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › Error Handling and Resilience › should handle activity logger gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › Error Handling and Resilience › should handle malformed WebSocket messages gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › Error Handling and Resilience › should handle malformed WebSocket messages gracefully

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › Performance and Scalability › should handle multiple concurrent WebSocket connections

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › Performance and Scalability › should handle multiple concurrent WebSocket connections

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

  ● Web Companion Integration Tests › Performance and Scalability › should handle rapid activity events without dropping data

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      22 |   let socketClient;
      23 |
    > 24 |   beforeEach(async () => {
         |   ^
      25 |     // Use a random port to avoid conflicts
      26 |     testPort = 3000 + Math.floor(Math.random() * 1000);
      27 |     baseUrl = `http://localhost:${testPort}`;

      at beforeEach (test/web-companion/integration/web-companion-integration.test.js:24:3)
      at describe (test/web-companion/integration/web-companion-integration.test.js:15:1)

  ● Web Companion Integration Tests › Performance and Scalability › should handle rapid activity events without dropping data

    TypeError: this.db.close is not a function

      146 |     if (this.db) {
      147 |       await new Promise((resolve, reject) => {
    > 148 |         this.db.close((err) => {
          |                 ^
      149 |           if (err) reject(err);
      150 |           else resolve();
      151 |         });

      at close (src/logging/activity-logger.js:148:17)
      at ActivityLogger.close (src/logging/activity-logger.js:147:13)
      at Object.close (test/web-companion/integration/web-companion-integration.test.js:74:28)

FAIL test/web-companion/unit/web-companion-security-performance.test.js (107.131 s)
  Web Companion Security and Performance Tests
    Security Headers and Middleware
      ✕ should implement Helmet security headers (5005 ms)
      ✕ should handle CORS properly in development mode (5002 ms)
      ✕ should validate Content-Type for JSON requests (5002 ms)
      ✕ should protect against path traversal in file operations (5002 ms)
      ✕ should limit file size for content endpoint (5000 ms)
    Input Validation and Sanitization
      ✕ should validate session ID format and length (5001 ms)
      ✕ should validate pagination parameters (5000 ms)
      ✕ should validate search query input (5001 ms)
      ✕ should handle malformed JSON gracefully (5000 ms)
    Performance and Concurrent Connections
      ✕ should handle concurrent WebSocket connections (5000 ms)
      ✕ should handle multiple concurrent HTTP requests (5000 ms)
      ✕ should handle WebSocket connection limits (5002 ms)
      ✕ should handle large result sets efficiently (5000 ms)
    Error Handling and Resilience
      ✕ should handle database connection failures gracefully (5001 ms)
      ✕ should handle activity logger failures gracefully (5001 ms)
      ✕ should handle file system errors safely (5000 ms)
      ✕ should handle git command failures gracefully (5001 ms)
      ✕ should handle malformed activity data gracefully (5000 ms)
    Memory and Resource Management
      ✕ should handle event broadcasting efficiently (5001 ms)
      ✕ should handle file tree depth limits (5000 ms)
      ✕ should handle search result limits (5001 ms)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should implement Helmet security headers

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should implement Helmet security headers

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should handle CORS properly in development mode

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should handle CORS properly in development mode

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should validate Content-Type for JSON requests

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should validate Content-Type for JSON requests

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should protect against path traversal in file operations

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should protect against path traversal in file operations

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should limit file size for content endpoint

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Security Headers and Middleware › should limit file size for content endpoint

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should validate session ID format and length

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should validate session ID format and length

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should validate pagination parameters

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should validate pagination parameters

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should validate search query input

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should validate search query input

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should handle malformed JSON gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Input Validation and Sanitization › should handle malformed JSON gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle concurrent WebSocket connections

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle concurrent WebSocket connections

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle multiple concurrent HTTP requests

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle multiple concurrent HTTP requests

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle WebSocket connection limits

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle WebSocket connection limits

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle large result sets efficiently

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Performance and Concurrent Connections › should handle large result sets efficiently

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle database connection failures gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle database connection failures gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle activity logger failures gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle activity logger failures gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle file system errors safely

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle file system errors safely

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle git command failures gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle git command failures gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle malformed activity data gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Error Handling and Resilience › should handle malformed activity data gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Memory and Resource Management › should handle event broadcasting efficiently

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Memory and Resource Management › should handle event broadcasting efficiently

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Memory and Resource Management › should handle file tree depth limits

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Memory and Resource Management › should handle file tree depth limits

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

  ● Web Companion Security and Performance Tests › Memory and Resource Management › should handle search result limits

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      17 |   let baseUrl;
      18 |
    > 19 |   beforeEach(async () => {
         |   ^
      20 |     port = await getAvailablePort();
      21 |     baseUrl = `http://localhost:${port}`;
      22 |     

      at beforeEach (test/web-companion/unit/web-companion-security-performance.test.js:19:3)
      at describe (test/web-companion/unit/web-companion-security-performance.test.js:12:1)

  ● Web Companion Security and Performance Tests › Memory and Resource Management › should handle search result limits

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/unit/web-companion-security-performance.test.js:44:16)

FAIL test/web-companion/integration/web-companion-documentation.test.js (112.119 s)
  Web Companion Real Integration Tests
    WebServer Startup and Shutdown
      ✕ should start web server successfully (5003 ms)
      ✕ should handle graceful shutdown (5001 ms)
      ✕ should reject duplicate server instances on same port (5001 ms)
    API Endpoints Integration
      ✕ should serve health check endpoint (5001 ms)
      ✕ should fetch conversation sessions (5001 ms)
      ✕ should fetch session messages (5002 ms)
      ✕ should fetch session statistics (5000 ms)
      ✕ should fetch system metrics (5001 ms)
      ✕ should fetch activity events (5001 ms)
      ✕ should handle invalid session ID validation (5000 ms)
      ✕ should handle missing database gracefully (5001 ms)
    WebSocket Integration
      ✕ should establish WebSocket connection (5000 ms)
      ✕ should receive activity broadcasts (5001 ms)
      ✕ should handle session subscription (5000 ms)
      ✕ should handle client disconnect (5001 ms)
    File API Integration
      ✕ should fetch directory tree (5002 ms)
      ✕ should fetch git status (5001 ms)
      ✕ should perform file search (5000 ms)
      ✕ should validate search parameters (5001 ms)
    Security and Middleware Integration
      ✕ should set security headers (5000 ms)
      ✕ should handle CORS correctly (5000 ms)
      ✕ should parse JSON requests (5002 ms)

  ● Web Companion Real Integration Tests › WebServer Startup and Shutdown › should start web server successfully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › WebServer Startup and Shutdown › should start web server successfully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › WebServer Startup and Shutdown › should handle graceful shutdown

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › WebServer Startup and Shutdown › should handle graceful shutdown

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › WebServer Startup and Shutdown › should reject duplicate server instances on same port

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › WebServer Startup and Shutdown › should reject duplicate server instances on same port

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should serve health check endpoint

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should serve health check endpoint

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch conversation sessions

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch conversation sessions

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch session messages

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch session messages

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch session statistics

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch session statistics

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch system metrics

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch system metrics

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch activity events

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should fetch activity events

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should handle invalid session ID validation

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should handle invalid session ID validation

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should handle missing database gracefully

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › API Endpoints Integration › should handle missing database gracefully

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › WebSocket Integration › should establish WebSocket connection

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › WebSocket Integration › should establish WebSocket connection

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › WebSocket Integration › should receive activity broadcasts

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › WebSocket Integration › should receive activity broadcasts

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › WebSocket Integration › should handle session subscription

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › WebSocket Integration › should handle session subscription

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › WebSocket Integration › should handle client disconnect

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › WebSocket Integration › should handle client disconnect

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › File API Integration › should fetch directory tree

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › File API Integration › should fetch directory tree

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › File API Integration › should fetch git status

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › File API Integration › should fetch git status

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › File API Integration › should perform file search

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › File API Integration › should perform file search

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › File API Integration › should validate search parameters

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › File API Integration › should validate search parameters

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › Security and Middleware Integration › should set security headers

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › Security and Middleware Integration › should set security headers

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › Security and Middleware Integration › should handle CORS correctly

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › Security and Middleware Integration › should handle CORS correctly

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

  ● Web Companion Real Integration Tests › Security and Middleware Integration › should parse JSON requests

    thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      16 |   let port;
      17 |
    > 18 |   beforeEach(async () => {
         |   ^
      19 |     // Get available port for testing
      20 |     port = await getAvailablePort();
      21 |     

      at beforeEach (test/web-companion/integration/web-companion-documentation.test.js:18:3)
      at describe (test/web-companion/integration/web-companion-documentation.test.js:12:1)

  ● Web Companion Real Integration Tests › Security and Middleware Integration › should parse JSON requests

    TypeError: this.db.close is not a function

      110 |     if (this.db) {
      111 |       return new Promise((resolve) => {
    > 112 |         this.db.close(resolve);
          |                 ^
      113 |       });
      114 |     }
      115 |   }

      at close (src/database/conversation-db.js:112:17)
      at ConversationDB.close (src/database/conversation-db.js:111:14)
      at Object.close (test/web-companion/integration/web-companion-documentation.test.js:44:16)

